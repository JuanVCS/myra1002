// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _one;
COMPAT_VARYING     float _mod_factor;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _texCoord_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texCoord_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
    vec2 _texture_size;
float _placeholder40;
};
struct tex_coords {
    vec2 _texCoord;
    float _mod_factor;
    vec2 _one;
};
vec4 _oPosition1;
tex_coords _coords1;
input_dummy _IN1;
vec4 _r0009;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_VARYING vec4 COL0;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec4 _oColor;
    _r0009 = VertexCoord.x*MVPMatrix[0];
    _r0009 = _r0009 + VertexCoord.y*MVPMatrix[1];
    _r0009 = _r0009 + VertexCoord.z*MVPMatrix[2];
    _r0009 = _r0009 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0009;
    _oColor = COLOR;
    _coords1._texCoord = TexCoord.xy;
    _coords1._mod_factor = (TexCoord.x*OutputSize.x*TextureSize.x)/InputSize.x;
    _coords1._one = 1.00000000E+00/TextureSize;
    gl_Position = _r0009;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    TEX1.x = _coords1._mod_factor;
    TEX2.xy = _coords1._one;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _one1;
COMPAT_VARYING     float _mod_factor;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _texCoord_size;
struct input_dummy {
    vec2 _video_size;
    vec2 _texCoord_size;
    vec2 _output_dummy_size;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
    vec2 _texture_size;
float _placeholder35;
};
struct tex_coords {
    vec2 _texCoord;
    float _mod_factor;
    vec2 _one1;
};
vec4 _ret_0;
float _TMP45;
float _TMP44;
float _TMP43;
float _TMP25;
float _TMP24;
float _TMP29;
vec4 _TMP23;
float _TMP22;
vec4 _TMP41;
float _TMP38;
float _TMP37;
float _TMP36;
float _TMP35;
float _TMP51;
float _TMP50;
float _TMP49;
float _TMP48;
vec4 _TMP39;
vec4 _TMP21;
float _TMP20;
vec4 _TMP19;
float _TMP18;
vec4 _TMP17;
vec4 _TMP34;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
float _TMP6;
vec4 _TMP5;
vec4 _TMP4;
float _TMP33;
float _TMP32;
float _TMP31;
float _TMP30;
vec4 _TMP3;
vec2 _TMP2;
float _TMP47;
float _TMP28;
float _TMP46;
vec2 _TMP27;
vec2 _TMP26;
input_dummy _IN2;
vec2 _coord0062;
float _dist0062;
vec2 _b0064;
float _TMP73;
float _x0074;
vec2 _TMP85;
vec4 _TMP93;
vec4 _x0108;
vec2 _c0120;
vec2 _c0124;
vec2 _c0126;
vec4 _r0128;
vec4 _TMP129;
vec2 _c0136;
vec2 _c0138;
vec2 _c0140;
vec2 _c0142;
vec4 _r0144;
vec4 _TMP145;
vec4 _wid0172;
vec4 _weights0172;
vec4 _TMP183;
vec4 _x0184;
vec4 _a0196;
vec4 _TMP205;
vec4 _x0206;
vec4 _wid0218;
vec4 _weights0218;
float _distance0218;
vec4 _TMP229;
vec4 _x0230;
vec4 _a0242;
vec4 _TMP251;
vec4 _x0252;
vec4 _wid0264;
vec4 _weights0264;
vec4 _TMP275;
vec4 _x0276;
vec4 _a0288;
vec4 _TMP297;
vec4 _x0298;
float _a0310;
vec4 _wid0312;
vec4 _weights0312;
vec4 _TMP323;
vec4 _x0324;
vec4 _a0336;
vec4 _TMP345;
vec4 _x0346;
vec4 _wid0360;
vec4 _weights0360;
vec4 _TMP371;
vec4 _x0372;
vec4 _a0384;
vec4 _TMP393;
vec4 _x0394;
float _a0406;
vec4 _wid0408;
vec4 _weights0408;
vec4 _TMP419;
vec4 _x0420;
vec4 _a0432;
vec4 _TMP441;
vec4 _x0442;
float _x0456;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform sampler2D Texture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _xy;
    vec2 _ratio_scale;
    float _filter;
    vec2 _uv_ratio;
    vec4 _coeffs;
    vec4 _col;
    vec4 _col2;
    vec4 _weights1;
    vec4 _weights2;
    vec3 _mul_res;
    vec3 _dotMaskWeights;
    _coord0062 = TEX0.xy*(TextureSize/InputSize);
    _coord0062 = (_coord0062 - vec2( 5.00000000E-01, 5.00000000E-01)) + vec2( 5.00000000E-01, 5.00000000E-01);
    _b0064 = vec2( 1.00000000E+00, 1.00000000E+00) - _coord0062;
    _TMP26 = min(_coord0062, _b0064);
    _coord0062 = _TMP26*vec2( 1.00000000E+00, 7.50000000E-01);
    _TMP27 = min(_coord0062, vec2( 1.00000005E-03, 1.00000005E-03));
    _coord0062 = vec2( 1.00000005E-03, 1.00000005E-03) - _TMP27;
    _TMP28 = dot(_coord0062, _coord0062);
    _TMP46 = inversesqrt(_TMP28);
    _dist0062 = 1.00000000E+00/_TMP46;
    _x0074 = (1.00000005E-03 - _dist0062)*8.00000000E+03;
    _TMP47 = min(1.00000000E+00, _x0074);
    _TMP73 = max(0.00000000E+00, _TMP47);
    _ratio_scale = TEX0.xy*TextureSize - vec2( 5.00000000E-01, 5.00000000E-01);
    _filter = ((InputSize/(OutputSize*TextureSize))*_ratio_scale.y).x;
    _TMP85 = fract(_ratio_scale);
    _TMP2 = floor(_ratio_scale);
    _xy = (_TMP2 + vec2( 5.00000000E-01, 5.00000000E-01))/TextureSize;
    _coeffs = 3.14159274E+00*vec4(1.00000000E+00 + _TMP85.x, _TMP85.x, 1.00000000E+00 - _TMP85.x, 2.00000000E+00 - _TMP85.x);
    _TMP3 = abs(_coeffs);
    _TMP93 = max(_TMP3, vec4( 9.99999975E-06, 9.99999975E-06, 9.99999975E-06, 9.99999975E-06));
    _TMP30 = sin(_TMP93.x);
    _TMP31 = sin(_TMP93.y);
    _TMP32 = sin(_TMP93.z);
    _TMP33 = sin(_TMP93.w);
    _TMP4 = vec4(_TMP30, _TMP31, _TMP32, _TMP33);
    _x0108 = _TMP93/2.00000000E+00;
    _TMP30 = sin(_x0108.x);
    _TMP31 = sin(_x0108.y);
    _TMP32 = sin(_x0108.z);
    _TMP33 = sin(_x0108.w);
    _TMP5 = vec4(_TMP30, _TMP31, _TMP32, _TMP33);
    _coeffs = ((2.00000000E+00*_TMP4)*_TMP5)/(_TMP93*_TMP93);
    _TMP6 = dot(_coeffs, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _coeffs = _coeffs/_TMP6;
    _c0120 = _xy + vec2(-TEX2.x, 0.00000000E+00);
    _TMP7 = COMPAT_TEXTURE(Texture, _c0120);
    _TMP8 = COMPAT_TEXTURE(Texture, _xy);
    _c0124 = _xy + vec2(TEX2.x, 0.00000000E+00);
    _TMP9 = COMPAT_TEXTURE(Texture, _c0124);
    _c0126 = _xy + vec2(2.00000000E+00*TEX2.x, 0.00000000E+00);
    _TMP10 = COMPAT_TEXTURE(Texture, _c0126);
    _r0128 = _coeffs.x*_TMP7;
    _r0128 = _r0128 + _coeffs.y*_TMP8;
    _r0128 = _r0128 + _coeffs.z*_TMP9;
    _r0128 = _r0128 + _coeffs.w*_TMP10;
    _TMP34 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _r0128);
    _TMP129 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP34);
    _c0136 = _xy + vec2(-TEX2.x, TEX2.y);
    _TMP12 = COMPAT_TEXTURE(Texture, _c0136);
    _c0138 = _xy + vec2(0.00000000E+00, TEX2.y);
    _TMP13 = COMPAT_TEXTURE(Texture, _c0138);
    _c0140 = _xy + TEX2.xy;
    _TMP14 = COMPAT_TEXTURE(Texture, _c0140);
    _c0142 = _xy + vec2(2.00000000E+00*TEX2.x, TEX2.y);
    _TMP15 = COMPAT_TEXTURE(Texture, _c0142);
    _r0144 = _coeffs.x*_TMP12;
    _r0144 = _r0144 + _coeffs.y*_TMP13;
    _r0144 = _r0144 + _coeffs.z*_TMP14;
    _r0144 = _r0144 + _coeffs.w*_TMP15;
    _TMP34 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _r0144);
    _TMP145 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP34);
    _TMP35 = pow(_TMP129.x, 2.40000010E+00);
    _TMP36 = pow(_TMP129.y, 2.40000010E+00);
    _TMP37 = pow(_TMP129.z, 2.40000010E+00);
    _TMP38 = pow(_TMP129.w, 2.40000010E+00);
    _col = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _TMP35 = pow(_TMP145.x, 2.40000010E+00);
    _TMP36 = pow(_TMP145.y, 2.40000010E+00);
    _TMP37 = pow(_TMP145.z, 2.40000010E+00);
    _TMP38 = pow(_TMP145.w, 2.40000010E+00);
    _col2 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _TMP35 = pow(_col.x, 4.00000000E+00);
    _TMP36 = pow(_col.y, 4.00000000E+00);
    _TMP37 = pow(_col.z, 4.00000000E+00);
    _TMP38 = pow(_col.w, 4.00000000E+00);
    _TMP39 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _wid0172 = 2.00000000E+00 + 2.00000000E+00*_TMP39;
    _weights0172 = vec4(_TMP85.y/3.00000012E-01, _TMP85.y/3.00000012E-01, _TMP85.y/3.00000012E-01, _TMP85.y/3.00000012E-01);
    _x0184 = 5.00000000E-01*_wid0172;
    _TMP48 = inversesqrt(_x0184.x);
    _TMP49 = inversesqrt(_x0184.y);
    _TMP50 = inversesqrt(_x0184.z);
    _TMP51 = inversesqrt(_x0184.w);
    _TMP183 = vec4(_TMP48, _TMP49, _TMP50, _TMP51);
    _a0196 = _weights0172*_TMP183;
    _TMP35 = pow(_a0196.x, _wid0172.x);
    _TMP36 = pow(_a0196.y, _wid0172.y);
    _TMP37 = pow(_a0196.z, _wid0172.z);
    _TMP38 = pow(_a0196.w, _wid0172.w);
    _TMP41 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _x0206 = -_TMP41;
    _TMP35 = pow(2.71828198E+00, _x0206.x);
    _TMP36 = pow(2.71828198E+00, _x0206.y);
    _TMP37 = pow(2.71828198E+00, _x0206.z);
    _TMP38 = pow(2.71828198E+00, _x0206.w);
    _TMP205 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _weights1 = (1.39999998E+00*_TMP205)/(6.00000024E-01 + 2.00000003E-01*_wid0172);
    _distance0218 = 1.00000000E+00 - _TMP85.y;
    _TMP35 = pow(_col2.x, 4.00000000E+00);
    _TMP36 = pow(_col2.y, 4.00000000E+00);
    _TMP37 = pow(_col2.z, 4.00000000E+00);
    _TMP38 = pow(_col2.w, 4.00000000E+00);
    _TMP39 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _wid0218 = 2.00000000E+00 + 2.00000000E+00*_TMP39;
    _weights0218 = vec4(_distance0218/3.00000012E-01, _distance0218/3.00000012E-01, _distance0218/3.00000012E-01, _distance0218/3.00000012E-01);
    _x0230 = 5.00000000E-01*_wid0218;
    _TMP48 = inversesqrt(_x0230.x);
    _TMP49 = inversesqrt(_x0230.y);
    _TMP50 = inversesqrt(_x0230.z);
    _TMP51 = inversesqrt(_x0230.w);
    _TMP229 = vec4(_TMP48, _TMP49, _TMP50, _TMP51);
    _a0242 = _weights0218*_TMP229;
    _TMP35 = pow(_a0242.x, _wid0218.x);
    _TMP36 = pow(_a0242.y, _wid0218.y);
    _TMP37 = pow(_a0242.z, _wid0218.z);
    _TMP38 = pow(_a0242.w, _wid0218.w);
    _TMP41 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _x0252 = -_TMP41;
    _TMP35 = pow(2.71828198E+00, _x0252.x);
    _TMP36 = pow(2.71828198E+00, _x0252.y);
    _TMP37 = pow(2.71828198E+00, _x0252.z);
    _TMP38 = pow(2.71828198E+00, _x0252.w);
    _TMP251 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _weights2 = (1.39999998E+00*_TMP251)/(6.00000024E-01 + 2.00000003E-01*_wid0218);
    _uv_ratio.y = _TMP85.y + 3.33333343E-01*_filter;
    _TMP35 = pow(_col.x, 4.00000000E+00);
    _TMP36 = pow(_col.y, 4.00000000E+00);
    _TMP37 = pow(_col.z, 4.00000000E+00);
    _TMP38 = pow(_col.w, 4.00000000E+00);
    _TMP39 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _wid0264 = 2.00000000E+00 + 2.00000000E+00*_TMP39;
    _weights0264 = vec4(_uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01);
    _x0276 = 5.00000000E-01*_wid0264;
    _TMP48 = inversesqrt(_x0276.x);
    _TMP49 = inversesqrt(_x0276.y);
    _TMP50 = inversesqrt(_x0276.z);
    _TMP51 = inversesqrt(_x0276.w);
    _TMP275 = vec4(_TMP48, _TMP49, _TMP50, _TMP51);
    _a0288 = _weights0264*_TMP275;
    _TMP35 = pow(_a0288.x, _wid0264.x);
    _TMP36 = pow(_a0288.y, _wid0264.y);
    _TMP37 = pow(_a0288.z, _wid0264.z);
    _TMP38 = pow(_a0288.w, _wid0264.w);
    _TMP41 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _x0298 = -_TMP41;
    _TMP35 = pow(2.71828198E+00, _x0298.x);
    _TMP36 = pow(2.71828198E+00, _x0298.y);
    _TMP37 = pow(2.71828198E+00, _x0298.z);
    _TMP38 = pow(2.71828198E+00, _x0298.w);
    _TMP297 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _TMP17 = (1.39999998E+00*_TMP297)/(6.00000024E-01 + 2.00000003E-01*_wid0264);
    _weights1 = (_weights1 + _TMP17)/3.00000000E+00;
    _a0310 = 1.00000000E+00 - _uv_ratio.y;
    _TMP18 = abs(_a0310);
    _TMP35 = pow(_col2.x, 4.00000000E+00);
    _TMP36 = pow(_col2.y, 4.00000000E+00);
    _TMP37 = pow(_col2.z, 4.00000000E+00);
    _TMP38 = pow(_col2.w, 4.00000000E+00);
    _TMP39 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _wid0312 = 2.00000000E+00 + 2.00000000E+00*_TMP39;
    _weights0312 = vec4(_TMP18/3.00000012E-01, _TMP18/3.00000012E-01, _TMP18/3.00000012E-01, _TMP18/3.00000012E-01);
    _x0324 = 5.00000000E-01*_wid0312;
    _TMP48 = inversesqrt(_x0324.x);
    _TMP49 = inversesqrt(_x0324.y);
    _TMP50 = inversesqrt(_x0324.z);
    _TMP51 = inversesqrt(_x0324.w);
    _TMP323 = vec4(_TMP48, _TMP49, _TMP50, _TMP51);
    _a0336 = _weights0312*_TMP323;
    _TMP35 = pow(_a0336.x, _wid0312.x);
    _TMP36 = pow(_a0336.y, _wid0312.y);
    _TMP37 = pow(_a0336.z, _wid0312.z);
    _TMP38 = pow(_a0336.w, _wid0312.w);
    _TMP41 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _x0346 = -_TMP41;
    _TMP35 = pow(2.71828198E+00, _x0346.x);
    _TMP36 = pow(2.71828198E+00, _x0346.y);
    _TMP37 = pow(2.71828198E+00, _x0346.z);
    _TMP38 = pow(2.71828198E+00, _x0346.w);
    _TMP345 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _TMP19 = (1.39999998E+00*_TMP345)/(6.00000024E-01 + 2.00000003E-01*_wid0312);
    _weights2 = (_weights2 + _TMP19)/3.00000000E+00;
    _uv_ratio.y = _uv_ratio.y - 6.66666687E-01*_filter;
    _TMP20 = abs(_uv_ratio.y);
    _TMP35 = pow(_col.x, 4.00000000E+00);
    _TMP36 = pow(_col.y, 4.00000000E+00);
    _TMP37 = pow(_col.z, 4.00000000E+00);
    _TMP38 = pow(_col.w, 4.00000000E+00);
    _TMP39 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _wid0360 = 2.00000000E+00 + 2.00000000E+00*_TMP39;
    _weights0360 = vec4(_TMP20/3.00000012E-01, _TMP20/3.00000012E-01, _TMP20/3.00000012E-01, _TMP20/3.00000012E-01);
    _x0372 = 5.00000000E-01*_wid0360;
    _TMP48 = inversesqrt(_x0372.x);
    _TMP49 = inversesqrt(_x0372.y);
    _TMP50 = inversesqrt(_x0372.z);
    _TMP51 = inversesqrt(_x0372.w);
    _TMP371 = vec4(_TMP48, _TMP49, _TMP50, _TMP51);
    _a0384 = _weights0360*_TMP371;
    _TMP35 = pow(_a0384.x, _wid0360.x);
    _TMP36 = pow(_a0384.y, _wid0360.y);
    _TMP37 = pow(_a0384.z, _wid0360.z);
    _TMP38 = pow(_a0384.w, _wid0360.w);
    _TMP41 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _x0394 = -_TMP41;
    _TMP35 = pow(2.71828198E+00, _x0394.x);
    _TMP36 = pow(2.71828198E+00, _x0394.y);
    _TMP37 = pow(2.71828198E+00, _x0394.z);
    _TMP38 = pow(2.71828198E+00, _x0394.w);
    _TMP393 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _TMP21 = (1.39999998E+00*_TMP393)/(6.00000024E-01 + 2.00000003E-01*_wid0360);
    _weights1 = _weights1 + _TMP21/3.00000000E+00;
    _a0406 = 1.00000000E+00 - _uv_ratio.y;
    _TMP22 = abs(_a0406);
    _TMP35 = pow(_col2.x, 4.00000000E+00);
    _TMP36 = pow(_col2.y, 4.00000000E+00);
    _TMP37 = pow(_col2.z, 4.00000000E+00);
    _TMP38 = pow(_col2.w, 4.00000000E+00);
    _TMP39 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _wid0408 = 2.00000000E+00 + 2.00000000E+00*_TMP39;
    _weights0408 = vec4(_TMP22/3.00000012E-01, _TMP22/3.00000012E-01, _TMP22/3.00000012E-01, _TMP22/3.00000012E-01);
    _x0420 = 5.00000000E-01*_wid0408;
    _TMP48 = inversesqrt(_x0420.x);
    _TMP49 = inversesqrt(_x0420.y);
    _TMP50 = inversesqrt(_x0420.z);
    _TMP51 = inversesqrt(_x0420.w);
    _TMP419 = vec4(_TMP48, _TMP49, _TMP50, _TMP51);
    _a0432 = _weights0408*_TMP419;
    _TMP35 = pow(_a0432.x, _wid0408.x);
    _TMP36 = pow(_a0432.y, _wid0408.y);
    _TMP37 = pow(_a0432.z, _wid0408.z);
    _TMP38 = pow(_a0432.w, _wid0408.w);
    _TMP41 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _x0442 = -_TMP41;
    _TMP35 = pow(2.71828198E+00, _x0442.x);
    _TMP36 = pow(2.71828198E+00, _x0442.y);
    _TMP37 = pow(2.71828198E+00, _x0442.z);
    _TMP38 = pow(2.71828198E+00, _x0442.w);
    _TMP441 = vec4(_TMP35, _TMP36, _TMP37, _TMP38);
    _TMP23 = (1.39999998E+00*_TMP441)/(6.00000024E-01 + 2.00000003E-01*_wid0408);
    _weights2 = _weights2 + _TMP23/3.00000000E+00;
    _mul_res = (_col*_weights1 + _col2*_weights2).xyz*vec3(_TMP73, _TMP73, _TMP73);
    _x0456 = TEX1.x/2.00000000E+00;
    _TMP29 = floor(_x0456);
    _TMP24 = TEX1.x - 2.00000000E+00*_TMP29;
    _TMP25 = floor(_TMP24);
    _dotMaskWeights = vec3( 1.00000000E+00, 6.99999988E-01, 1.00000000E+00) + _TMP25*vec3( -3.00000012E-01, 3.00000012E-01, -3.00000012E-01);
    _mul_res = _mul_res*_dotMaskWeights;
    _TMP43 = pow(_mul_res.x, 4.54545438E-01);
    _TMP44 = pow(_mul_res.y, 4.54545438E-01);
    _TMP45 = pow(_mul_res.z, 4.54545438E-01);
    _mul_res = vec3(_TMP43, _TMP44, _TMP45);
    _ret_0 = vec4(_mul_res.x, _mul_res.y, _mul_res.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
