// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARcosangle;
COMPAT_VARYING     vec2 VARsinangle;
COMPAT_VARYING     vec3 VARstretch;
COMPAT_VARYING     vec2 VARilfac;
COMPAT_VARYING     float VARmod_factor;
COMPAT_VARYING     vec2 VARone;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     vec4 _position1;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _tex_coord;
struct orig {
    vec2 _tex_coord;
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
float _placeholder47;
};
struct input_dummy {
    vec2 _video_size1;
    vec2 _texture_size1;
    vec2 _output_dummy_size1;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _position1;
    vec4 _color1;
    vec2 _texCoord1;
    vec2 VARone;
    float VARmod_factor;
    vec2 VARilfac;
    vec3 VARstretch;
    vec2 VARsinangle;
    vec2 VARcosangle;
};
out_vertex _ret_0;
float _TMP1;
float _TMP10;
vec2 _TMP9;
vec2 _TMP8;
float _TMP22;
float _TMP21;
float _TMP20;
float _TMP19;
float _TMP18;
float _TMP17;
float _TMP26;
vec2 _TMP7;
vec2 _TMP6;
float _TMP16;
float _TMP15;
float _TMP27;
float _TMP14;
float _TMP13;
float _TMP12;
float _TMP11;
float _TMP25;
float _TMP24;
float _TMP23;
float _TMP5;
float _TMP4;
float _TMP3;
float _TMP2;
orig _ORIG1;
input_dummy _IN1;
vec4 _r0035;
vec2 _c0049;
vec2 _lo0049;
vec2 _hi0049;
vec2 _TMP310049;
float _c0051;
vec2 _xy0051;
vec2 _point0051;
vec2 _tang0051;
vec2 _poc0051;
float _A0051;
float _B0051;
float _C0051;
float _a0051;
vec2 _uv0051;
float _r0051;
float _A0053;
float _B0053;
float _C0053;
float _a0059;
float _a0069;
float _negate0073;
float _x0073;
float _ret0073;
float _a0077;
float _a0081;
vec2 _uv0083;
float _r0083;
float _x0083;
float _D0083;
float _a0095;
float _a0097;
vec2 _uv0101;
float _r0101;
float _x0101;
float _D0101;
float _a0113;
float _a0115;
vec2 _uv0119;
float _r0119;
float _x0119;
float _D0119;
float _a0131;
float _a0133;
vec2 _uv0137;
float _r0137;
float _x0137;
float _D0137;
float _a0149;
float _a0151;
float _a0155;
float _b0155;
float _x0157;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 COLOR;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 COL0;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
uniform COMPAT_PRECISION vec2 OrigTextureSize;
uniform COMPAT_PRECISION vec2 OrigInputSize;
void main()
{
    out_vertex _OUT;
    _r0035 = VertexCoord.x*MVPMatrix[0];
    _r0035 = _r0035 + VertexCoord.y*MVPMatrix[1];
    _r0035 = _r0035 + VertexCoord.z*MVPMatrix[2];
    _r0035 = _r0035 + VertexCoord.w*MVPMatrix[3];
    _TMP2 = sin(0.00000000E+00);
    _TMP3 = sin(-0.00000000E+00);
    _OUT.VARsinangle = vec2(_TMP2, _TMP3);
    _TMP4 = cos(0.00000000E+00);
    _TMP5 = cos(-0.00000000E+00);
    _OUT.VARcosangle = vec2(_TMP4, _TMP5);
    _xy0051 = (-2.00000000E+00*_OUT.VARsinangle)/(1.00000000E+00 + 1.33333337E+00*_OUT.VARcosangle.x*_OUT.VARcosangle.y);
    _TMP23 = dot(_xy0051, _xy0051);
    _A0053 = _TMP23 + 2.25000000E+00;
    _TMP24 = dot(_xy0051, _OUT.VARsinangle);
    _B0053 = 2.00000000E+00*(2.00000000E+00*(_TMP24 - 1.50000000E+00*_OUT.VARcosangle.x*_OUT.VARcosangle.y) - 2.25000000E+00);
    _C0053 = 2.25000000E+00 + 6.00000000E+00*_OUT.VARcosangle.x*_OUT.VARcosangle.y;
    _a0059 = _B0053*_B0053 - 4.00000000E+00*_A0053*_C0053;
    _TMP26 = inversesqrt(_a0059);
    _TMP25 = 1.00000000E+00/_TMP26;
    _c0051 = (-_B0053 - _TMP25)/(2.00000000E+00*_A0053);
    _point0051 = vec2(_c0051, _c0051)*_xy0051;
    _point0051 = _point0051 - vec2( -2.00000000E+00, -2.00000000E+00)*_OUT.VARsinangle;
    _point0051 = _point0051/vec2( 2.00000000E+00, 2.00000000E+00);
    _tang0051 = _OUT.VARsinangle/_OUT.VARcosangle;
    _poc0051 = _point0051/_OUT.VARcosangle;
    _TMP11 = dot(_tang0051, _tang0051);
    _A0051 = _TMP11 + 1.00000000E+00;
    _TMP12 = dot(_poc0051, _tang0051);
    _B0051 = -2.00000000E+00*_TMP12;
    _TMP13 = dot(_poc0051, _poc0051);
    _C0051 = _TMP13 - 1.00000000E+00;
    _a0069 = _B0051*_B0051 - 4.00000000E+00*_A0051*_C0051;
    _TMP26 = inversesqrt(_a0069);
    _TMP14 = 1.00000000E+00/_TMP26;
    _a0051 = (-_B0051 + _TMP14)/(2.00000000E+00*_A0051);
    _uv0051 = (_point0051 - _a0051*_OUT.VARsinangle)/_OUT.VARcosangle;
    _negate0073 = float((_a0051 < 0.00000000E+00));
    _x0073 = abs(_a0051);
    _ret0073 = -1.87292993E-02*_x0073;
    _ret0073 = _ret0073 + 7.42610022E-02;
    _ret0073 = _ret0073*_x0073;
    _ret0073 = _ret0073 - 2.12114394E-01;
    _ret0073 = _ret0073*_x0073;
    _ret0073 = _ret0073 + 1.57072902E+00;
    _a0077 = 1.00000000E+00 - _x0073;
    _TMP26 = inversesqrt(_a0077);
    _TMP27 = 1.00000000E+00/_TMP26;
    _ret0073 = _ret0073*_TMP27;
    _ret0073 = _ret0073 - 2.00000000E+00*_negate0073*_ret0073;
    _TMP15 = _negate0073*3.14159298E+00 + _ret0073;
    _r0051 = 2.00000000E+00*_TMP15;
    _a0081 = _r0051/2.00000000E+00;
    _TMP16 = sin(_a0081);
    _c0049 = (_uv0051*_r0051)/_TMP16;
    _uv0083 = vec2(-5.00000000E-01, _c0049.y);
    _TMP17 = dot(_uv0083, _uv0083);
    _TMP26 = inversesqrt(_TMP17);
    _TMP18 = 1.00000000E+00/_TMP26;
    _TMP19 = abs(_TMP18);
    _r0083 = max(_TMP19, 9.99999975E-06);
    _a0095 = _r0083/2.00000000E+00;
    _TMP20 = sin(_a0095);
    _uv0083 = _uv0083*(_TMP20/_r0083);
    _a0097 = _r0083/2.00000000E+00;
    _TMP21 = cos(_a0097);
    _x0083 = 1.00000000E+00 - _TMP21;
    _TMP22 = dot(_uv0083, _OUT.VARsinangle);
    _D0083 = 7.50000000E-01 + _x0083*_OUT.VARcosangle.x*_OUT.VARcosangle.y + _TMP22;
    _TMP6 = (1.50000000E+00*(_uv0083*_OUT.VARcosangle - _x0083*_OUT.VARsinangle))/_D0083;
    _uv0101 = vec2(_c0049.x, -3.75000000E-01);
    _TMP17 = dot(_uv0101, _uv0101);
    _TMP26 = inversesqrt(_TMP17);
    _TMP18 = 1.00000000E+00/_TMP26;
    _TMP19 = abs(_TMP18);
    _r0101 = max(_TMP19, 9.99999975E-06);
    _a0113 = _r0101/2.00000000E+00;
    _TMP20 = sin(_a0113);
    _uv0101 = _uv0101*(_TMP20/_r0101);
    _a0115 = _r0101/2.00000000E+00;
    _TMP21 = cos(_a0115);
    _x0101 = 1.00000000E+00 - _TMP21;
    _TMP22 = dot(_uv0101, _OUT.VARsinangle);
    _D0101 = 7.50000000E-01 + _x0101*_OUT.VARcosangle.x*_OUT.VARcosangle.y + _TMP22;
    _TMP7 = (1.50000000E+00*(_uv0101*_OUT.VARcosangle - _x0101*_OUT.VARsinangle))/_D0101;
    _lo0049 = vec2(_TMP6.x, _TMP7.y)/vec2( 1.00000000E+00, 7.50000000E-01);
    _uv0119 = vec2(5.00000000E-01, _c0049.y);
    _TMP17 = dot(_uv0119, _uv0119);
    _TMP26 = inversesqrt(_TMP17);
    _TMP18 = 1.00000000E+00/_TMP26;
    _TMP19 = abs(_TMP18);
    _r0119 = max(_TMP19, 9.99999975E-06);
    _a0131 = _r0119/2.00000000E+00;
    _TMP20 = sin(_a0131);
    _uv0119 = _uv0119*(_TMP20/_r0119);
    _a0133 = _r0119/2.00000000E+00;
    _TMP21 = cos(_a0133);
    _x0119 = 1.00000000E+00 - _TMP21;
    _TMP22 = dot(_uv0119, _OUT.VARsinangle);
    _D0119 = 7.50000000E-01 + _x0119*_OUT.VARcosangle.x*_OUT.VARcosangle.y + _TMP22;
    _TMP8 = (1.50000000E+00*(_uv0119*_OUT.VARcosangle - _x0119*_OUT.VARsinangle))/_D0119;
    _uv0137 = vec2(_c0049.x, 3.75000000E-01);
    _TMP17 = dot(_uv0137, _uv0137);
    _TMP26 = inversesqrt(_TMP17);
    _TMP18 = 1.00000000E+00/_TMP26;
    _TMP19 = abs(_TMP18);
    _r0137 = max(_TMP19, 9.99999975E-06);
    _a0149 = _r0137/2.00000000E+00;
    _TMP20 = sin(_a0149);
    _uv0137 = _uv0137*(_TMP20/_r0137);
    _a0151 = _r0137/2.00000000E+00;
    _TMP21 = cos(_a0151);
    _x0137 = 1.00000000E+00 - _TMP21;
    _TMP22 = dot(_uv0137, _OUT.VARsinangle);
    _D0137 = 7.50000000E-01 + _x0137*_OUT.VARcosangle.x*_OUT.VARcosangle.y + _TMP22;
    _TMP9 = (1.50000000E+00*(_uv0137*_OUT.VARcosangle - _x0137*_OUT.VARsinangle))/_D0137;
    _hi0049 = vec2(_TMP8.x, _TMP9.y)/vec2( 1.00000000E+00, 7.50000000E-01);
    _a0155 = _hi0049.x - _lo0049.x;
    _b0155 = _hi0049.y - _lo0049.y;
    _TMP10 = max(_a0155, _b0155);
    _TMP310049 = ((_hi0049 + _lo0049)*vec2( 1.00000000E+00, 7.50000000E-01))*5.00000000E-01;
    _OUT.VARstretch = vec3(_TMP310049.x, _TMP310049.y, _TMP10);
    _x0157 = InputSize.y/2.00000000E+02;
    _TMP1 = floor(_x0157);
    _OUT.VARilfac = vec2(1.00000000E+00, _TMP1);
    _OUT.VARone = _OUT.VARilfac/OrigTextureSize;
    _OUT.VARmod_factor = (TexCoord.x*OrigTextureSize.x*OutputSize.x)/OrigInputSize.x;
    _ret_0._position1 = _r0035;
    _ret_0._color1 = COLOR;
    _ret_0._texCoord1 = TexCoord.xy;
    VARone = _OUT.VARone;
    VARmod_factor = _OUT.VARmod_factor;
    VARilfac = _OUT.VARilfac;
    VARstretch = _OUT.VARstretch;
    VARsinangle = _OUT.VARsinangle;
    VARcosangle = _OUT.VARcosangle;
    gl_Position = _r0035;
    COL0 = COLOR;
    TEX0.xy = TexCoord.xy;
    return;
    COL0 = _ret_0._color1;
    TEX0.xy = _ret_0._texCoord1;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARcosangle;
COMPAT_VARYING     vec2 VARsinangle;
COMPAT_VARYING     vec3 VARstretch;
COMPAT_VARYING     vec2 VARilfac;
COMPAT_VARYING     float VARmod_factor;
COMPAT_VARYING     vec2 VARone;
COMPAT_VARYING     vec2 _texCoord;
COMPAT_VARYING     vec4 _color1;
COMPAT_VARYING     float _frame_rotation;
COMPAT_VARYING     vec2 _tex_coord;
struct orig {
    vec2 _tex_coord;
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
float _placeholder44;
};
struct input_dummy {
    vec2 _video_size1;
    vec2 _texture_size1;
    vec2 _output_dummy_size1;
    float _frame_count;
    float _frame_direction;
    float _frame_rotation;
};
struct out_vertex {
    vec4 _color1;
    vec2 _texCoord;
    vec2 VARone;
    float VARmod_factor;
    vec2 VARilfac;
    vec3 VARstretch;
    vec2 VARsinangle;
    vec2 VARcosangle;
};
vec4 _ret_0;
float _TMP66;
float _TMP65;
float _TMP64;
float _TMP38;
float _TMP50;
float _TMP49;
float _TMP48;
float _TMP47;
vec3 _TMP36;
vec4 _TMP35;
vec4 _TMP34;
float _TMP33;
vec4 _TMP62;
float _TMP58;
float _TMP57;
float _TMP56;
float _TMP55;
vec4 _TMP61;
float _TMP74;
float _TMP73;
float _TMP72;
float _TMP71;
vec4 _TMP60;
vec4 _TMP32;
float _TMP31;
vec4 _TMP30;
float _TMP29;
vec4 _TMP28;
vec4 _TMP59;
vec4 _TMP26;
vec4 _TMP24;
vec4 _TMP22;
vec4 _TMP20;
vec4 _TMP25;
vec4 _TMP23;
vec4 _TMP21;
vec4 _TMP19;
vec4 _TMP17;
vec4 _TMP15;
vec4 _TMP13;
vec4 _TMP11;
vec4 _TMP16;
vec4 _TMP14;
vec4 _TMP12;
vec4 _TMP10;
float _TMP9;
vec4 _TMP8;
vec4 _TMP7;
float _TMP54;
float _TMP53;
float _TMP52;
float _TMP51;
vec4 _TMP6;
vec2 _TMP5;
float _TMP4;
float _TMP46;
float _TMP3;
float _TMP45;
vec2 _TMP2;
vec2 _TMP1;
vec2 _TMP0;
float _TMP44;
float _TMP43;
float _TMP70;
float _TMP42;
float _TMP41;
float _TMP40;
float _TMP39;
float _TMP69;
float _TMP68;
float _TMP67;
out_vertex _VAR1;
uniform sampler2D Texture;
orig _ORIG1;
input_dummy _IN1;
float _c0083;
vec2 _point0083;
vec2 _tang0083;
vec2 _poc0083;
float _A0083;
float _B0083;
float _C0083;
float _a0083;
vec2 _uv0083;
float _r0083;
float _A0085;
float _B0085;
float _C0085;
float _a0091;
float _a0101;
float _negate0105;
float _x0105;
float _ret0105;
float _a0109;
float _a0113;
vec2 _b0115;
float _TMP124;
float _x0125;
float _c0131;
float _a0133;
vec4 _TMP144;
vec4 _x0159;
vec2 _c0171;
vec2 _c0195;
vec2 _c0207;
vec4 _r0219;
vec4 _TMP220;
vec2 _c0227;
vec2 _c0239;
vec2 _c0251;
vec2 _c0263;
vec4 _r0275;
vec4 _TMP276;
vec4 _wid0283;
vec4 _weights0283;
vec4 _x0295;
vec4 _a0305;
vec4 _TMP314;
vec4 _x0315;
vec4 _wid0327;
vec4 _weights0327;
float _distance0327;
vec4 _x0339;
vec4 _a0349;
vec4 _TMP358;
vec4 _x0359;
vec4 _wid0371;
vec4 _weights0371;
vec4 _x0383;
vec4 _a0393;
vec4 _TMP402;
vec4 _x0403;
float _a0415;
vec4 _wid0417;
vec4 _weights0417;
vec4 _x0429;
vec4 _a0439;
vec4 _TMP448;
vec4 _x0449;
vec4 _wid0463;
vec4 _weights0463;
vec4 _x0475;
vec4 _a0485;
vec4 _TMP494;
vec4 _x0495;
float _a0507;
vec4 _wid0509;
vec4 _weights0509;
vec4 _x0521;
vec4 _a0531;
vec4 _TMP540;
vec4 _x0541;
float _c0563;
float _a0565;
COMPAT_VARYING vec4 TEX0;
 
uniform COMPAT_PRECISION vec2 OrigTextureSize;
uniform COMPAT_PRECISION vec2 OrigInputSize;
uniform sampler2D OrigTexture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _cd;
    vec2 _xy2;
    vec2 _cd2;
    float _dist;
    vec2 _xy21;
    vec2 _ilfloat;
    vec2 _ratio_scale;
    float _filter;
    vec2 _uv_ratio;
    vec4 _coeffs;
    vec4 _weights1;
    vec4 _weights2;
    vec3 _mul_res;
    vec3 _dotMaskWeights;
    _cd = TEX0.xy*(OrigTextureSize/OrigInputSize);
    _cd = ((_cd - vec2( 5.00000000E-01, 5.00000000E-01))*vec2( 1.00000000E+00, 7.50000000E-01))*VARstretch.z + VARstretch.xy;
    _TMP67 = dot(_cd, _cd);
    _A0085 = _TMP67 + 2.25000000E+00;
    _TMP68 = dot(_cd, VARsinangle);
    _B0085 = 2.00000000E+00*(2.00000000E+00*(_TMP68 - 1.50000000E+00*VARcosangle.x*VARcosangle.y) - 2.25000000E+00);
    _C0085 = 2.25000000E+00 + 6.00000000E+00*VARcosangle.x*VARcosangle.y;
    _a0091 = _B0085*_B0085 - 4.00000000E+00*_A0085*_C0085;
    _TMP45 = inversesqrt(_a0091);
    _TMP69 = 1.00000000E+00/_TMP45;
    _c0083 = (-_B0085 - _TMP69)/(2.00000000E+00*_A0085);
    _point0083 = vec2(_c0083, _c0083)*_cd;
    _point0083 = _point0083 - vec2( -2.00000000E+00, -2.00000000E+00)*VARsinangle;
    _point0083 = _point0083/vec2( 2.00000000E+00, 2.00000000E+00);
    _tang0083 = VARsinangle/VARcosangle;
    _poc0083 = _point0083/VARcosangle;
    _TMP39 = dot(_tang0083, _tang0083);
    _A0083 = _TMP39 + 1.00000000E+00;
    _TMP40 = dot(_poc0083, _tang0083);
    _B0083 = -2.00000000E+00*_TMP40;
    _TMP41 = dot(_poc0083, _poc0083);
    _C0083 = _TMP41 - 1.00000000E+00;
    _a0101 = _B0083*_B0083 - 4.00000000E+00*_A0083*_C0083;
    _TMP45 = inversesqrt(_a0101);
    _TMP42 = 1.00000000E+00/_TMP45;
    _a0083 = (-_B0083 + _TMP42)/(2.00000000E+00*_A0083);
    _uv0083 = (_point0083 - _a0083*VARsinangle)/VARcosangle;
    _negate0105 = float((_a0083 < 0.00000000E+00));
    _x0105 = abs(_a0083);
    _ret0105 = -1.87292993E-02*_x0105;
    _ret0105 = _ret0105 + 7.42610022E-02;
    _ret0105 = _ret0105*_x0105;
    _ret0105 = _ret0105 - 2.12114394E-01;
    _ret0105 = _ret0105*_x0105;
    _ret0105 = _ret0105 + 1.57072902E+00;
    _a0109 = 1.00000000E+00 - _x0105;
    _TMP45 = inversesqrt(_a0109);
    _TMP70 = 1.00000000E+00/_TMP45;
    _ret0105 = _ret0105*_TMP70;
    _ret0105 = _ret0105 - 2.00000000E+00*_negate0105*_ret0105;
    _TMP43 = _negate0105*3.14159298E+00 + _ret0105;
    _r0083 = 2.00000000E+00*_TMP43;
    _a0113 = _r0083/2.00000000E+00;
    _TMP44 = sin(_a0113);
    _TMP0 = (_uv0083*_r0083)/_TMP44;
    _xy2 = (((_TMP0/vec2( 1.00999999E+00, 1.00999999E+00))/vec2( 1.00000000E+00, 7.50000000E-01) + vec2( 5.00000000E-01, 5.00000000E-01))*OrigInputSize)/OrigTextureSize;
    _cd2 = _xy2*(OrigTextureSize/OrigInputSize);
    _cd2 = (_cd2 - vec2( 5.00000000E-01, 5.00000000E-01))*vec2( 1.00999999E+00, 1.00999999E+00) + vec2( 5.00000000E-01, 5.00000000E-01);
    _b0115 = vec2( 1.00000000E+00, 1.00000000E+00) - _cd2;
    _TMP1 = min(_cd2, _b0115);
    _cd2 = _TMP1*vec2( 1.00000000E+00, 7.50000000E-01);
    _TMP2 = min(_cd2, vec2( 2.99999993E-02, 2.99999993E-02));
    _cd2 = vec2( 2.99999993E-02, 2.99999993E-02) - _TMP2;
    _TMP3 = dot(_cd2, _cd2);
    _TMP45 = inversesqrt(_TMP3);
    _dist = 1.00000000E+00/_TMP45;
    _x0125 = (2.99999993E-02 - _dist)*8.00000000E+01;
    _TMP46 = min(1.00000000E+00, _x0125);
    _TMP124 = max(0.00000000E+00, _TMP46);
    _xy21 = ((((_xy2*OrigTextureSize)/OrigInputSize - vec2( 5.00000000E-01, 5.00000000E-01)) + vec2( 5.00000000E-01, 5.00000000E-01))*InputSize)/TextureSize;
    if (VARilfac.y > 1.50000000E+00) { 
        _a0133 = float(FrameCount)/2.00000000E+00;
        _TMP47 = abs(_a0133);
        _TMP48 = fract(_TMP47);
        _TMP49 = abs(2.00000000E+00);
        _c0131 = _TMP48*_TMP49;
        if (float(FrameCount) < 0.00000000E+00) { 
            _TMP50 = -_c0131;
        } else {
            _TMP50 = _c0131;
        } 
        _TMP4 = _TMP50;
    } else {
        _TMP4 = 0.00000000E+00;
    } 
    _ilfloat = vec2(0.00000000E+00, _TMP4);
    _ratio_scale = ((_xy2*TextureSize - vec2( 5.00000000E-01, 5.00000000E-01)) + _ilfloat)/VARilfac;
    _filter = ((InputSize/(OutputSize*TextureSize))*_ratio_scale.y).x;
    _uv_ratio = fract(_ratio_scale);
    _TMP5 = floor(_ratio_scale);
    _xy2 = ((_TMP5*VARilfac + vec2( 5.00000000E-01, 5.00000000E-01)) - _ilfloat)/TextureSize;
    _coeffs = 3.14159274E+00*vec4(1.00000000E+00 + _uv_ratio.x, _uv_ratio.x, 1.00000000E+00 - _uv_ratio.x, 2.00000000E+00 - _uv_ratio.x);
    _TMP6 = abs(_coeffs);
    _TMP144 = max(_TMP6, vec4( 9.99999975E-06, 9.99999975E-06, 9.99999975E-06, 9.99999975E-06));
    _TMP51 = sin(_TMP144.x);
    _TMP52 = sin(_TMP144.y);
    _TMP53 = sin(_TMP144.z);
    _TMP54 = sin(_TMP144.w);
    _TMP7 = vec4(_TMP51, _TMP52, _TMP53, _TMP54);
    _x0159 = _TMP144/2.00000000E+00;
    _TMP51 = sin(_x0159.x);
    _TMP52 = sin(_x0159.y);
    _TMP53 = sin(_x0159.z);
    _TMP54 = sin(_x0159.w);
    _TMP8 = vec4(_TMP51, _TMP52, _TMP53, _TMP54);
    _coeffs = ((2.00000000E+00*_TMP7)*_TMP8)/(_TMP144*_TMP144);
    _TMP9 = dot(_coeffs, vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00));
    _coeffs = _coeffs/_TMP9;
    _c0171 = _xy2 + vec2(-VARone.x, 0.00000000E+00);
    _TMP10 = COMPAT_TEXTURE(OrigTexture, _c0171);
    _TMP55 = pow(_TMP10.x, 2.40000010E+00);
    _TMP56 = pow(_TMP10.y, 2.40000010E+00);
    _TMP57 = pow(_TMP10.z, 2.40000010E+00);
    _TMP58 = pow(_TMP10.w, 2.40000010E+00);
    _TMP11 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _TMP12 = COMPAT_TEXTURE(OrigTexture, _xy2);
    _TMP55 = pow(_TMP12.x, 2.40000010E+00);
    _TMP56 = pow(_TMP12.y, 2.40000010E+00);
    _TMP57 = pow(_TMP12.z, 2.40000010E+00);
    _TMP58 = pow(_TMP12.w, 2.40000010E+00);
    _TMP13 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _c0195 = _xy2 + vec2(VARone.x, 0.00000000E+00);
    _TMP14 = COMPAT_TEXTURE(OrigTexture, _c0195);
    _TMP55 = pow(_TMP14.x, 2.40000010E+00);
    _TMP56 = pow(_TMP14.y, 2.40000010E+00);
    _TMP57 = pow(_TMP14.z, 2.40000010E+00);
    _TMP58 = pow(_TMP14.w, 2.40000010E+00);
    _TMP15 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _c0207 = _xy2 + vec2(2.00000000E+00*VARone.x, 0.00000000E+00);
    _TMP16 = COMPAT_TEXTURE(OrigTexture, _c0207);
    _TMP55 = pow(_TMP16.x, 2.40000010E+00);
    _TMP56 = pow(_TMP16.y, 2.40000010E+00);
    _TMP57 = pow(_TMP16.z, 2.40000010E+00);
    _TMP58 = pow(_TMP16.w, 2.40000010E+00);
    _TMP17 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _r0219 = _coeffs.x*_TMP11;
    _r0219 = _r0219 + _coeffs.y*_TMP13;
    _r0219 = _r0219 + _coeffs.z*_TMP15;
    _r0219 = _r0219 + _coeffs.w*_TMP17;
    _TMP59 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _r0219);
    _TMP220 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP59);
    _c0227 = _xy2 + vec2(-VARone.x, VARone.y);
    _TMP19 = COMPAT_TEXTURE(OrigTexture, _c0227);
    _TMP55 = pow(_TMP19.x, 2.40000010E+00);
    _TMP56 = pow(_TMP19.y, 2.40000010E+00);
    _TMP57 = pow(_TMP19.z, 2.40000010E+00);
    _TMP58 = pow(_TMP19.w, 2.40000010E+00);
    _TMP20 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _c0239 = _xy2 + vec2(0.00000000E+00, VARone.y);
    _TMP21 = COMPAT_TEXTURE(OrigTexture, _c0239);
    _TMP55 = pow(_TMP21.x, 2.40000010E+00);
    _TMP56 = pow(_TMP21.y, 2.40000010E+00);
    _TMP57 = pow(_TMP21.z, 2.40000010E+00);
    _TMP58 = pow(_TMP21.w, 2.40000010E+00);
    _TMP22 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _c0251 = _xy2 + VARone;
    _TMP23 = COMPAT_TEXTURE(OrigTexture, _c0251);
    _TMP55 = pow(_TMP23.x, 2.40000010E+00);
    _TMP56 = pow(_TMP23.y, 2.40000010E+00);
    _TMP57 = pow(_TMP23.z, 2.40000010E+00);
    _TMP58 = pow(_TMP23.w, 2.40000010E+00);
    _TMP24 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _c0263 = _xy2 + vec2(2.00000000E+00*VARone.x, VARone.y);
    _TMP25 = COMPAT_TEXTURE(OrigTexture, _c0263);
    _TMP55 = pow(_TMP25.x, 2.40000010E+00);
    _TMP56 = pow(_TMP25.y, 2.40000010E+00);
    _TMP57 = pow(_TMP25.z, 2.40000010E+00);
    _TMP58 = pow(_TMP25.w, 2.40000010E+00);
    _TMP26 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _r0275 = _coeffs.x*_TMP20;
    _r0275 = _r0275 + _coeffs.y*_TMP22;
    _r0275 = _r0275 + _coeffs.z*_TMP24;
    _r0275 = _r0275 + _coeffs.w*_TMP26;
    _TMP59 = min(vec4( 1.00000000E+00, 1.00000000E+00, 1.00000000E+00, 1.00000000E+00), _r0275);
    _TMP276 = max(vec4( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00, 0.00000000E+00), _TMP59);
    _TMP55 = pow(_TMP220.x, 4.00000000E+00);
    _TMP56 = pow(_TMP220.y, 4.00000000E+00);
    _TMP57 = pow(_TMP220.z, 4.00000000E+00);
    _TMP58 = pow(_TMP220.w, 4.00000000E+00);
    _TMP60 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _wid0283 = 2.00000000E+00 + 2.00000000E+00*_TMP60;
    _weights0283 = vec4(_uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01);
    _x0295 = 5.00000000E-01*_wid0283;
    _TMP71 = inversesqrt(_x0295.x);
    _TMP72 = inversesqrt(_x0295.y);
    _TMP73 = inversesqrt(_x0295.z);
    _TMP74 = inversesqrt(_x0295.w);
    _TMP61 = vec4(_TMP71, _TMP72, _TMP73, _TMP74);
    _a0305 = _weights0283*_TMP61;
    _TMP55 = pow(_a0305.x, _wid0283.x);
    _TMP56 = pow(_a0305.y, _wid0283.y);
    _TMP57 = pow(_a0305.z, _wid0283.z);
    _TMP58 = pow(_a0305.w, _wid0283.w);
    _TMP62 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _x0315 = -_TMP62;
    _TMP55 = pow(2.71828198E+00, _x0315.x);
    _TMP56 = pow(2.71828198E+00, _x0315.y);
    _TMP57 = pow(2.71828198E+00, _x0315.z);
    _TMP58 = pow(2.71828198E+00, _x0315.w);
    _TMP314 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _weights1 = (1.39999998E+00*_TMP314)/(6.00000024E-01 + 2.00000003E-01*_wid0283);
    _distance0327 = 1.00000000E+00 - _uv_ratio.y;
    _TMP55 = pow(_TMP276.x, 4.00000000E+00);
    _TMP56 = pow(_TMP276.y, 4.00000000E+00);
    _TMP57 = pow(_TMP276.z, 4.00000000E+00);
    _TMP58 = pow(_TMP276.w, 4.00000000E+00);
    _TMP60 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _wid0327 = 2.00000000E+00 + 2.00000000E+00*_TMP60;
    _weights0327 = vec4(_distance0327/3.00000012E-01, _distance0327/3.00000012E-01, _distance0327/3.00000012E-01, _distance0327/3.00000012E-01);
    _x0339 = 5.00000000E-01*_wid0327;
    _TMP71 = inversesqrt(_x0339.x);
    _TMP72 = inversesqrt(_x0339.y);
    _TMP73 = inversesqrt(_x0339.z);
    _TMP74 = inversesqrt(_x0339.w);
    _TMP61 = vec4(_TMP71, _TMP72, _TMP73, _TMP74);
    _a0349 = _weights0327*_TMP61;
    _TMP55 = pow(_a0349.x, _wid0327.x);
    _TMP56 = pow(_a0349.y, _wid0327.y);
    _TMP57 = pow(_a0349.z, _wid0327.z);
    _TMP58 = pow(_a0349.w, _wid0327.w);
    _TMP62 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _x0359 = -_TMP62;
    _TMP55 = pow(2.71828198E+00, _x0359.x);
    _TMP56 = pow(2.71828198E+00, _x0359.y);
    _TMP57 = pow(2.71828198E+00, _x0359.z);
    _TMP58 = pow(2.71828198E+00, _x0359.w);
    _TMP358 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _weights2 = (1.39999998E+00*_TMP358)/(6.00000024E-01 + 2.00000003E-01*_wid0327);
    _uv_ratio.y = _uv_ratio.y + 3.33333343E-01*_filter;
    _TMP55 = pow(_TMP220.x, 4.00000000E+00);
    _TMP56 = pow(_TMP220.y, 4.00000000E+00);
    _TMP57 = pow(_TMP220.z, 4.00000000E+00);
    _TMP58 = pow(_TMP220.w, 4.00000000E+00);
    _TMP60 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _wid0371 = 2.00000000E+00 + 2.00000000E+00*_TMP60;
    _weights0371 = vec4(_uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01, _uv_ratio.y/3.00000012E-01);
    _x0383 = 5.00000000E-01*_wid0371;
    _TMP71 = inversesqrt(_x0383.x);
    _TMP72 = inversesqrt(_x0383.y);
    _TMP73 = inversesqrt(_x0383.z);
    _TMP74 = inversesqrt(_x0383.w);
    _TMP61 = vec4(_TMP71, _TMP72, _TMP73, _TMP74);
    _a0393 = _weights0371*_TMP61;
    _TMP55 = pow(_a0393.x, _wid0371.x);
    _TMP56 = pow(_a0393.y, _wid0371.y);
    _TMP57 = pow(_a0393.z, _wid0371.z);
    _TMP58 = pow(_a0393.w, _wid0371.w);
    _TMP62 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _x0403 = -_TMP62;
    _TMP55 = pow(2.71828198E+00, _x0403.x);
    _TMP56 = pow(2.71828198E+00, _x0403.y);
    _TMP57 = pow(2.71828198E+00, _x0403.z);
    _TMP58 = pow(2.71828198E+00, _x0403.w);
    _TMP402 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _TMP28 = (1.39999998E+00*_TMP402)/(6.00000024E-01 + 2.00000003E-01*_wid0371);
    _weights1 = (_weights1 + _TMP28)/3.00000000E+00;
    _a0415 = 1.00000000E+00 - _uv_ratio.y;
    _TMP29 = abs(_a0415);
    _TMP55 = pow(_TMP276.x, 4.00000000E+00);
    _TMP56 = pow(_TMP276.y, 4.00000000E+00);
    _TMP57 = pow(_TMP276.z, 4.00000000E+00);
    _TMP58 = pow(_TMP276.w, 4.00000000E+00);
    _TMP60 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _wid0417 = 2.00000000E+00 + 2.00000000E+00*_TMP60;
    _weights0417 = vec4(_TMP29/3.00000012E-01, _TMP29/3.00000012E-01, _TMP29/3.00000012E-01, _TMP29/3.00000012E-01);
    _x0429 = 5.00000000E-01*_wid0417;
    _TMP71 = inversesqrt(_x0429.x);
    _TMP72 = inversesqrt(_x0429.y);
    _TMP73 = inversesqrt(_x0429.z);
    _TMP74 = inversesqrt(_x0429.w);
    _TMP61 = vec4(_TMP71, _TMP72, _TMP73, _TMP74);
    _a0439 = _weights0417*_TMP61;
    _TMP55 = pow(_a0439.x, _wid0417.x);
    _TMP56 = pow(_a0439.y, _wid0417.y);
    _TMP57 = pow(_a0439.z, _wid0417.z);
    _TMP58 = pow(_a0439.w, _wid0417.w);
    _TMP62 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _x0449 = -_TMP62;
    _TMP55 = pow(2.71828198E+00, _x0449.x);
    _TMP56 = pow(2.71828198E+00, _x0449.y);
    _TMP57 = pow(2.71828198E+00, _x0449.z);
    _TMP58 = pow(2.71828198E+00, _x0449.w);
    _TMP448 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _TMP30 = (1.39999998E+00*_TMP448)/(6.00000024E-01 + 2.00000003E-01*_wid0417);
    _weights2 = (_weights2 + _TMP30)/3.00000000E+00;
    _uv_ratio.y = _uv_ratio.y - 6.66666687E-01*_filter;
    _TMP31 = abs(_uv_ratio.y);
    _TMP55 = pow(_TMP220.x, 4.00000000E+00);
    _TMP56 = pow(_TMP220.y, 4.00000000E+00);
    _TMP57 = pow(_TMP220.z, 4.00000000E+00);
    _TMP58 = pow(_TMP220.w, 4.00000000E+00);
    _TMP60 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _wid0463 = 2.00000000E+00 + 2.00000000E+00*_TMP60;
    _weights0463 = vec4(_TMP31/3.00000012E-01, _TMP31/3.00000012E-01, _TMP31/3.00000012E-01, _TMP31/3.00000012E-01);
    _x0475 = 5.00000000E-01*_wid0463;
    _TMP71 = inversesqrt(_x0475.x);
    _TMP72 = inversesqrt(_x0475.y);
    _TMP73 = inversesqrt(_x0475.z);
    _TMP74 = inversesqrt(_x0475.w);
    _TMP61 = vec4(_TMP71, _TMP72, _TMP73, _TMP74);
    _a0485 = _weights0463*_TMP61;
    _TMP55 = pow(_a0485.x, _wid0463.x);
    _TMP56 = pow(_a0485.y, _wid0463.y);
    _TMP57 = pow(_a0485.z, _wid0463.z);
    _TMP58 = pow(_a0485.w, _wid0463.w);
    _TMP62 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _x0495 = -_TMP62;
    _TMP55 = pow(2.71828198E+00, _x0495.x);
    _TMP56 = pow(2.71828198E+00, _x0495.y);
    _TMP57 = pow(2.71828198E+00, _x0495.z);
    _TMP58 = pow(2.71828198E+00, _x0495.w);
    _TMP494 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _TMP32 = (1.39999998E+00*_TMP494)/(6.00000024E-01 + 2.00000003E-01*_wid0463);
    _weights1 = _weights1 + _TMP32/3.00000000E+00;
    _a0507 = 1.00000000E+00 - _uv_ratio.y;
    _TMP33 = abs(_a0507);
    _TMP55 = pow(_TMP276.x, 4.00000000E+00);
    _TMP56 = pow(_TMP276.y, 4.00000000E+00);
    _TMP57 = pow(_TMP276.z, 4.00000000E+00);
    _TMP58 = pow(_TMP276.w, 4.00000000E+00);
    _TMP60 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _wid0509 = 2.00000000E+00 + 2.00000000E+00*_TMP60;
    _weights0509 = vec4(_TMP33/3.00000012E-01, _TMP33/3.00000012E-01, _TMP33/3.00000012E-01, _TMP33/3.00000012E-01);
    _x0521 = 5.00000000E-01*_wid0509;
    _TMP71 = inversesqrt(_x0521.x);
    _TMP72 = inversesqrt(_x0521.y);
    _TMP73 = inversesqrt(_x0521.z);
    _TMP74 = inversesqrt(_x0521.w);
    _TMP61 = vec4(_TMP71, _TMP72, _TMP73, _TMP74);
    _a0531 = _weights0509*_TMP61;
    _TMP55 = pow(_a0531.x, _wid0509.x);
    _TMP56 = pow(_a0531.y, _wid0509.y);
    _TMP57 = pow(_a0531.z, _wid0509.z);
    _TMP58 = pow(_a0531.w, _wid0509.w);
    _TMP62 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _x0541 = -_TMP62;
    _TMP55 = pow(2.71828198E+00, _x0541.x);
    _TMP56 = pow(2.71828198E+00, _x0541.y);
    _TMP57 = pow(2.71828198E+00, _x0541.z);
    _TMP58 = pow(2.71828198E+00, _x0541.w);
    _TMP540 = vec4(_TMP55, _TMP56, _TMP57, _TMP58);
    _TMP34 = (1.39999998E+00*_TMP540)/(6.00000024E-01 + 2.00000003E-01*_wid0509);
    _weights2 = _weights2 + _TMP34/3.00000000E+00;
    _mul_res = (_TMP220*_weights1 + _TMP276*_weights2).xyz;
    _TMP35 = COMPAT_TEXTURE(Texture, _xy21);
    _TMP64 = pow(_TMP35.x, 2.20000005E+00);
    _TMP65 = pow(_TMP35.y, 2.20000005E+00);
    _TMP66 = pow(_TMP35.z, 2.20000005E+00);
    _TMP36 = vec3(_TMP64, _TMP65, _TMP66);
    _mul_res = _mul_res + _TMP36*1.00000001E-01;
    _mul_res = _mul_res*vec3(_TMP124, _TMP124, _TMP124);
    _a0565 = VARmod_factor/2.00000000E+00;
    _TMP47 = abs(_a0565);
    _TMP48 = fract(_TMP47);
    _TMP49 = abs(2.00000000E+00);
    _c0563 = _TMP48*_TMP49;
    if (VARmod_factor < 0.00000000E+00) { 
        _TMP50 = -_c0563;
    } else {
        _TMP50 = _c0563;
    } 
    _TMP38 = floor(_TMP50);
    _dotMaskWeights = vec3( 1.00000000E+00, 6.99999988E-01, 1.00000000E+00) + _TMP38*vec3( -3.00000012E-01, 3.00000012E-01, -3.00000012E-01);
    _mul_res = _mul_res*_dotMaskWeights;
    _TMP64 = pow(_mul_res.x, 4.54545438E-01);
    _TMP65 = pow(_mul_res.y, 4.54545438E-01);
    _TMP66 = pow(_mul_res.z, 4.54545438E-01);
    _mul_res = vec3(_TMP64, _TMP65, _TMP66);
    _ret_0 = vec4(_mul_res.x, _mul_res.y, _mul_res.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
