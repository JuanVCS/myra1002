// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif


struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};

vec4 _outPosition1;

vec4 _r0010;
vec4 _v0010;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;

 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{

    vec2 _outTexCoord;

    _v0010 = vec4(float(VertexCoord.x), float(VertexCoord.y), float(VertexCoord.z), float(VertexCoord.w));
    _r0010 = _v0010.x*MVPMatrix[0];
    _r0010 = _r0010 + _v0010.y*MVPMatrix[1];
    _r0010 = _r0010 + _v0010.z*MVPMatrix[2];
    _r0010 = _r0010 + _v0010.w*MVPMatrix[3];
    _outPosition1 = vec4(float(_r0010.x), float(_r0010.y), float(_r0010.z), float(_r0010.w));
    _outTexCoord = TexCoord.xy;
    gl_Position = _outPosition1;
    TEX0.xy = TexCoord.xy;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif


struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};

vec4 _ret_0;
float _TMP151;
float _TMP147;
float _TMP144;
float _TMP141;
float _TMP139;
float _TMP135;
float _TMP132;
float _TMP129;
float _TMP127;
float _TMP123;
float _TMP120;
float _TMP117;
float _TMP150;
float _TMP149;
float _TMP148;
float _TMP146;
float _TMP145;
float _TMP143;
float _TMP142;
float _TMP140;
float _TMP138;
float _TMP137;
float _TMP136;
float _TMP134;
float _TMP133;
float _TMP131;
float _TMP130;
float _TMP128;
float _TMP126;
float _TMP125;
float _TMP124;
float _TMP122;
float _TMP121;
float _TMP119;
float _TMP118;
float _TMP116;
vec3 _TMP115;
vec4 _TMP114;
float _TMP155;
float _TMP113;
float _TMP109;
float _TMP106;
float _TMP103;
float _TMP101;
float _TMP97;
float _TMP94;
float _TMP91;
float _TMP89;
float _TMP85;
float _TMP82;
float _TMP79;
float _TMP112;
float _TMP111;
float _TMP110;
float _TMP108;
float _TMP107;
float _TMP105;
float _TMP104;
float _TMP102;
float _TMP100;
float _TMP99;
float _TMP98;
float _TMP96;
float _TMP95;
float _TMP93;
float _TMP92;
float _TMP90;
float _TMP88;
float _TMP87;
float _TMP86;
float _TMP84;
float _TMP83;
float _TMP81;
float _TMP80;
float _TMP78;
vec3 _TMP77;
vec4 _TMP76;
float _TMP75;
float _TMP71;
float _TMP68;
float _TMP65;
float _TMP63;
float _TMP59;
float _TMP56;
float _TMP53;
float _TMP51;
float _TMP47;
float _TMP44;
float _TMP41;
float _TMP74;
float _TMP73;
float _TMP72;
float _TMP70;
float _TMP69;
float _TMP67;
float _TMP66;
float _TMP64;
float _TMP62;
float _TMP61;
float _TMP60;
float _TMP58;
float _TMP57;
float _TMP55;
float _TMP54;
float _TMP52;
float _TMP50;
float _TMP49;
float _TMP48;
float _TMP46;
float _TMP45;
float _TMP43;
float _TMP42;
float _TMP40;
vec3 _TMP39;
vec4 _TMP38;
float _TMP37;
float _TMP33;
float _TMP30;
float _TMP27;
float _TMP25;
float _TMP21;
float _TMP18;
float _TMP15;
float _TMP13;
float _TMP9;
float _TMP6;
float _TMP3;
float _TMP36;
float _TMP35;
float _TMP34;
float _TMP32;
float _TMP31;
float _TMP29;
float _TMP28;
float _TMP26;
float _TMP24;
float _TMP23;
float _TMP22;
float _TMP20;
float _TMP19;
float _TMP17;
float _TMP16;
float _TMP14;
float _TMP12;
float _TMP11;
float _TMP10;
float _TMP8;
float _TMP7;
float _TMP5;
float _TMP4;
float _TMP2;
vec3 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
input_dummy _IN1;
float _TMP161;
float _x0162;
vec2 _c0166;
float _TMP169;
float _x0170;
float _TMP175;
float _x0176;
float _TMP181;
float _x0182;
vec3 _r0188;
float _a0198;
float _b0198;
float _a0202;
float _b0202;
float _a0204;
float _a0208;
float _b0208;
float _b0210;
float _a0214;
float _b0214;
float _b0216;
float _a0218;
float _a0222;
float _b0222;
float _a0226;
float _b0226;
float _a0228;
float _a0232;
float _b0232;
float _b0234;
float _a0238;
float _b0238;
float _b0240;
float _a0242;
float _a0246;
float _b0246;
float _a0250;
float _b0250;
float _a0252;
float _a0256;
float _b0256;
float _b0258;
float _a0262;
float _b0262;
float _b0264;
float _a0266;
vec2 _c0268;
float _TMP271;
float _x0272;
float _TMP277;
float _x0278;
float _TMP283;
float _x0284;
vec3 _r0290;
float _a0300;
float _b0300;
float _a0304;
float _b0304;
float _a0306;
float _a0310;
float _b0310;
float _b0312;
float _a0316;
float _b0316;
float _b0318;
float _a0320;
float _a0324;
float _b0324;
float _a0328;
float _b0328;
float _a0330;
float _a0334;
float _b0334;
float _b0336;
float _a0340;
float _b0340;
float _b0342;
float _a0344;
float _a0348;
float _b0348;
float _a0352;
float _b0352;
float _a0354;
float _a0358;
float _b0358;
float _b0360;
float _a0364;
float _b0364;
float _b0366;
float _a0368;
vec2 _c0370;
float _TMP373;
float _x0374;
float _TMP379;
float _x0380;
float _TMP385;
float _x0386;
vec3 _r0392;
float _a0402;
float _b0402;
float _a0406;
float _b0406;
float _a0408;
float _a0412;
float _b0412;
float _b0414;
float _a0418;
float _b0418;
float _b0420;
float _a0422;
float _a0426;
float _b0426;
float _a0430;
float _b0430;
float _a0432;
float _a0436;
float _b0436;
float _b0438;
float _a0442;
float _b0442;
float _b0444;
float _a0446;
float _a0450;
float _b0450;
float _a0454;
float _b0454;
float _a0456;
float _a0460;
float _b0460;
float _b0462;
float _a0466;
float _b0466;
float _b0468;
float _a0470;
vec2 _c0472;
float _TMP475;
float _x0476;
float _TMP481;
float _x0482;
float _TMP487;
float _x0488;
vec3 _r0494;
float _a0504;
float _b0504;
float _a0508;
float _b0508;
float _a0510;
float _a0514;
float _b0514;
float _b0516;
float _a0520;
float _b0520;
float _b0522;
float _a0524;
float _a0528;
float _b0528;
float _a0532;
float _b0532;
float _a0534;
float _a0538;
float _b0538;
float _b0540;
float _a0544;
float _b0544;
float _b0546;
float _a0548;
float _a0552;
float _b0552;
float _a0556;
float _b0556;
float _a0558;
float _a0562;
float _b0562;
float _b0564;
float _a0568;
float _b0568;
float _b0570;
float _a0572;
vec3 _r0574;
COMPAT_VARYING vec4 TEX0;
uniform vec3 _RGB_to_YIQ[3];
uniform vec3 _YIQ_to_RGB[3];

 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{

    vec3 _tempColor;
    float _oneT;
    float _oneI;
    float _X;

    _x0162 = TEX0.x*TextureSize.x - 5.00000000E-001;
    _TMP161 = fract(_x0162);
    _oneT = 1.00000000E+000/TextureSize.x;
    _oneI = float((1.00000000E+000/InputSize.x));
    _X = _TMP161 - -1.00000000E+000;
    _c0166 = vec2(TEX0.x - _X*_oneT, TEX0.y);
    _TMP0 = COMPAT_TEXTURE(Texture, _c0166);
    _x0170 = ((_TMP0.x - 6.44531250E-002)*2.56000000E+002)/2.20000000E+002;
    _TMP155 = min(1.00000000E+000, _x0170);
    _TMP169 = max(0.00000000E+000, _TMP155);
    _x0176 = ((_TMP0.y - 6.44531250E-002)*2.56000000E+002)/2.24000000E+002;
    _TMP155 = min(1.00000000E+000, _x0176);
    _TMP175 = max(0.00000000E+000, _TMP155);
    _x0182 = ((_TMP0.z - 6.44531250E-002)*2.56000000E+002)/2.24000000E+002;
    _TMP155 = min(1.00000000E+000, _x0182);
    _TMP181 = max(0.00000000E+000, _TMP155);
    _TMP1 = vec3(_TMP169, _TMP175, _TMP181);
    _r0188.x = dot(_RGB_to_YIQ[0], _TMP1);
    _r0188.y = dot(_RGB_to_YIQ[1], _TMP1);
    _r0188.z = dot(_RGB_to_YIQ[2], _TMP1);
    _TMP2 = abs(_X);
    _a0198 = _TMP2 + 5.00000000E-001;
    _b0198 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP3 = min(_a0198, _b0198);
    _TMP4 = abs(_X);
    _a0202 = _TMP4 + 5.00000000E-001;
    _b0202 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP5 = min(_a0202, _b0202);
    _a0204 = 3.14159274E+000*2.56000000E+002*_oneI*_TMP5;
    _TMP6 = sin(_a0204);
    _TMP7 = abs(_X);
    _a0208 = _TMP7 - 5.00000000E-001;
    _b0208 = -1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP8 = max(_a0208, _b0208);
    _b0210 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP9 = min(_TMP8, _b0210);
    _TMP10 = abs(_X);
    _a0214 = _TMP10 - 5.00000000E-001;
    _b0214 = -1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP11 = max(_a0214, _b0214);
    _b0216 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP12 = min(_TMP11, _b0216);
    _a0218 = 3.14159274E+000*2.56000000E+002*_oneI*_TMP12;
    _TMP13 = sin(_a0218);
    _TMP14 = abs(_X);
    _a0222 = _TMP14 + 5.00000000E-001;
    _b0222 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP15 = min(_a0222, _b0222);
    _TMP16 = abs(_X);
    _a0226 = _TMP16 + 5.00000000E-001;
    _b0226 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP17 = min(_a0226, _b0226);
    _a0228 = 3.14159274E+000*8.31999969E+001*_oneI*_TMP17;
    _TMP18 = sin(_a0228);
    _TMP19 = abs(_X);
    _a0232 = _TMP19 - 5.00000000E-001;
    _b0232 = -1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP20 = max(_a0232, _b0232);
    _b0234 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP21 = min(_TMP20, _b0234);
    _TMP22 = abs(_X);
    _a0238 = _TMP22 - 5.00000000E-001;
    _b0238 = -1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP23 = max(_a0238, _b0238);
    _b0240 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP24 = min(_TMP23, _b0240);
    _a0242 = 3.14159274E+000*8.31999969E+001*_oneI*_TMP24;
    _TMP25 = sin(_a0242);
    _TMP26 = abs(_X);
    _a0246 = _TMP26 + 5.00000000E-001;
    _b0246 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP27 = min(_a0246, _b0246);
    _TMP28 = abs(_X);
    _a0250 = _TMP28 + 5.00000000E-001;
    _b0250 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP29 = min(_a0250, _b0250);
    _a0252 = 3.14159274E+000*2.56000004E+001*_oneI*_TMP29;
    _TMP30 = sin(_a0252);
    _TMP31 = abs(_X);
    _a0256 = _TMP31 - 5.00000000E-001;
    _b0256 = -1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP32 = max(_a0256, _b0256);
    _b0258 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP33 = min(_TMP32, _b0258);
    _TMP34 = abs(_X);
    _a0262 = _TMP34 - 5.00000000E-001;
    _b0262 = -1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP35 = max(_a0262, _b0262);
    _b0264 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP36 = min(_TMP35, _b0264);
    _a0266 = 3.14159274E+000*2.56000004E+001*_oneI*_TMP36;
    _TMP37 = sin(_a0266);
    _tempColor = vec3(_r0188.x*((((3.14159274E+000*2.56000000E+002*_oneI*_TMP3 + _TMP6) - 3.14159274E+000*2.56000000E+002*_oneI*_TMP9) - _TMP13)/6.28318548E+000), _r0188.y*((((3.14159274E+000*8.31999969E+001*_oneI*_TMP15 + _TMP18) - 3.14159274E+000*8.31999969E+001*_oneI*_TMP21) - _TMP25)/6.28318548E+000), _r0188.z*((((3.14159274E+000*2.56000004E+001*_oneI*_TMP27 + _TMP30) - 3.14159274E+000*2.56000004E+001*_oneI*_TMP33) - _TMP37)/6.28318548E+000));
    _c0268 = vec2(TEX0.x - _TMP161*_oneT, TEX0.y);
    _TMP38 = COMPAT_TEXTURE(Texture, _c0268);
    _x0272 = ((_TMP38.x - 6.44531250E-002)*2.56000000E+002)/2.20000000E+002;
    _TMP155 = min(1.00000000E+000, _x0272);
    _TMP271 = max(0.00000000E+000, _TMP155);
    _x0278 = ((_TMP38.y - 6.44531250E-002)*2.56000000E+002)/2.24000000E+002;
    _TMP155 = min(1.00000000E+000, _x0278);
    _TMP277 = max(0.00000000E+000, _TMP155);
    _x0284 = ((_TMP38.z - 6.44531250E-002)*2.56000000E+002)/2.24000000E+002;
    _TMP155 = min(1.00000000E+000, _x0284);
    _TMP283 = max(0.00000000E+000, _TMP155);
    _TMP39 = vec3(_TMP271, _TMP277, _TMP283);
    _r0290.x = dot(_RGB_to_YIQ[0], _TMP39);
    _r0290.y = dot(_RGB_to_YIQ[1], _TMP39);
    _r0290.z = dot(_RGB_to_YIQ[2], _TMP39);
    _TMP40 = abs(_TMP161);
    _a0300 = _TMP40 + 5.00000000E-001;
    _b0300 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP41 = min(_a0300, _b0300);
    _TMP42 = abs(_TMP161);
    _a0304 = _TMP42 + 5.00000000E-001;
    _b0304 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP43 = min(_a0304, _b0304);
    _a0306 = 3.14159274E+000*2.56000000E+002*_oneI*_TMP43;
    _TMP44 = sin(_a0306);
    _TMP45 = abs(_TMP161);
    _a0310 = _TMP45 - 5.00000000E-001;
    _b0310 = -1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP46 = max(_a0310, _b0310);
    _b0312 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP47 = min(_TMP46, _b0312);
    _TMP48 = abs(_TMP161);
    _a0316 = _TMP48 - 5.00000000E-001;
    _b0316 = -1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP49 = max(_a0316, _b0316);
    _b0318 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP50 = min(_TMP49, _b0318);
    _a0320 = 3.14159274E+000*2.56000000E+002*_oneI*_TMP50;
    _TMP51 = sin(_a0320);
    _TMP52 = abs(_TMP161);
    _a0324 = _TMP52 + 5.00000000E-001;
    _b0324 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP53 = min(_a0324, _b0324);
    _TMP54 = abs(_TMP161);
    _a0328 = _TMP54 + 5.00000000E-001;
    _b0328 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP55 = min(_a0328, _b0328);
    _a0330 = 3.14159274E+000*8.31999969E+001*_oneI*_TMP55;
    _TMP56 = sin(_a0330);
    _TMP57 = abs(_TMP161);
    _a0334 = _TMP57 - 5.00000000E-001;
    _b0334 = -1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP58 = max(_a0334, _b0334);
    _b0336 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP59 = min(_TMP58, _b0336);
    _TMP60 = abs(_TMP161);
    _a0340 = _TMP60 - 5.00000000E-001;
    _b0340 = -1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP61 = max(_a0340, _b0340);
    _b0342 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP62 = min(_TMP61, _b0342);
    _a0344 = 3.14159274E+000*8.31999969E+001*_oneI*_TMP62;
    _TMP63 = sin(_a0344);
    _TMP64 = abs(_TMP161);
    _a0348 = _TMP64 + 5.00000000E-001;
    _b0348 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP65 = min(_a0348, _b0348);
    _TMP66 = abs(_TMP161);
    _a0352 = _TMP66 + 5.00000000E-001;
    _b0352 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP67 = min(_a0352, _b0352);
    _a0354 = 3.14159274E+000*2.56000004E+001*_oneI*_TMP67;
    _TMP68 = sin(_a0354);
    _TMP69 = abs(_TMP161);
    _a0358 = _TMP69 - 5.00000000E-001;
    _b0358 = -1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP70 = max(_a0358, _b0358);
    _b0360 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP71 = min(_TMP70, _b0360);
    _TMP72 = abs(_TMP161);
    _a0364 = _TMP72 - 5.00000000E-001;
    _b0364 = -1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP73 = max(_a0364, _b0364);
    _b0366 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP74 = min(_TMP73, _b0366);
    _a0368 = 3.14159274E+000*2.56000004E+001*_oneI*_TMP74;
    _TMP75 = sin(_a0368);
    _tempColor = _tempColor + vec3(_r0290.x*((((3.14159274E+000*2.56000000E+002*_oneI*_TMP41 + _TMP44) - 3.14159274E+000*2.56000000E+002*_oneI*_TMP47) - _TMP51)/6.28318548E+000), _r0290.y*((((3.14159274E+000*8.31999969E+001*_oneI*_TMP53 + _TMP56) - 3.14159274E+000*8.31999969E+001*_oneI*_TMP59) - _TMP63)/6.28318548E+000), _r0290.z*((((3.14159274E+000*2.56000004E+001*_oneI*_TMP65 + _TMP68) - 3.14159274E+000*2.56000004E+001*_oneI*_TMP71) - _TMP75)/6.28318548E+000));
    _X = _TMP161 - 1.00000000E+000;
    _c0370 = vec2(TEX0.x - _X*_oneT, TEX0.y);
    _TMP76 = COMPAT_TEXTURE(Texture, _c0370);
    _x0374 = ((_TMP76.x - 6.44531250E-002)*2.56000000E+002)/2.20000000E+002;
    _TMP155 = min(1.00000000E+000, _x0374);
    _TMP373 = max(0.00000000E+000, _TMP155);
    _x0380 = ((_TMP76.y - 6.44531250E-002)*2.56000000E+002)/2.24000000E+002;
    _TMP155 = min(1.00000000E+000, _x0380);
    _TMP379 = max(0.00000000E+000, _TMP155);
    _x0386 = ((_TMP76.z - 6.44531250E-002)*2.56000000E+002)/2.24000000E+002;
    _TMP155 = min(1.00000000E+000, _x0386);
    _TMP385 = max(0.00000000E+000, _TMP155);
    _TMP77 = vec3(_TMP373, _TMP379, _TMP385);
    _r0392.x = dot(_RGB_to_YIQ[0], _TMP77);
    _r0392.y = dot(_RGB_to_YIQ[1], _TMP77);
    _r0392.z = dot(_RGB_to_YIQ[2], _TMP77);
    _TMP78 = abs(_X);
    _a0402 = _TMP78 + 5.00000000E-001;
    _b0402 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP79 = min(_a0402, _b0402);
    _TMP80 = abs(_X);
    _a0406 = _TMP80 + 5.00000000E-001;
    _b0406 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP81 = min(_a0406, _b0406);
    _a0408 = 3.14159274E+000*2.56000000E+002*_oneI*_TMP81;
    _TMP82 = sin(_a0408);
    _TMP83 = abs(_X);
    _a0412 = _TMP83 - 5.00000000E-001;
    _b0412 = -1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP84 = max(_a0412, _b0412);
    _b0414 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP85 = min(_TMP84, _b0414);
    _TMP86 = abs(_X);
    _a0418 = _TMP86 - 5.00000000E-001;
    _b0418 = -1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP87 = max(_a0418, _b0418);
    _b0420 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP88 = min(_TMP87, _b0420);
    _a0422 = 3.14159274E+000*2.56000000E+002*_oneI*_TMP88;
    _TMP89 = sin(_a0422);
    _TMP90 = abs(_X);
    _a0426 = _TMP90 + 5.00000000E-001;
    _b0426 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP91 = min(_a0426, _b0426);
    _TMP92 = abs(_X);
    _a0430 = _TMP92 + 5.00000000E-001;
    _b0430 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP93 = min(_a0430, _b0430);
    _a0432 = 3.14159274E+000*8.31999969E+001*_oneI*_TMP93;
    _TMP94 = sin(_a0432);
    _TMP95 = abs(_X);
    _a0436 = _TMP95 - 5.00000000E-001;
    _b0436 = -1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP96 = max(_a0436, _b0436);
    _b0438 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP97 = min(_TMP96, _b0438);
    _TMP98 = abs(_X);
    _a0442 = _TMP98 - 5.00000000E-001;
    _b0442 = -1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP99 = max(_a0442, _b0442);
    _b0444 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP100 = min(_TMP99, _b0444);
    _a0446 = 3.14159274E+000*8.31999969E+001*_oneI*_TMP100;
    _TMP101 = sin(_a0446);
    _TMP102 = abs(_X);
    _a0450 = _TMP102 + 5.00000000E-001;
    _b0450 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP103 = min(_a0450, _b0450);
    _TMP104 = abs(_X);
    _a0454 = _TMP104 + 5.00000000E-001;
    _b0454 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP105 = min(_a0454, _b0454);
    _a0456 = 3.14159274E+000*2.56000004E+001*_oneI*_TMP105;
    _TMP106 = sin(_a0456);
    _TMP107 = abs(_X);
    _a0460 = _TMP107 - 5.00000000E-001;
    _b0460 = -1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP108 = max(_a0460, _b0460);
    _b0462 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP109 = min(_TMP108, _b0462);
    _TMP110 = abs(_X);
    _a0466 = _TMP110 - 5.00000000E-001;
    _b0466 = -1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP111 = max(_a0466, _b0466);
    _b0468 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP112 = min(_TMP111, _b0468);
    _a0470 = 3.14159274E+000*2.56000004E+001*_oneI*_TMP112;
    _TMP113 = sin(_a0470);
    _tempColor = _tempColor + vec3(_r0392.x*((((3.14159274E+000*2.56000000E+002*_oneI*_TMP79 + _TMP82) - 3.14159274E+000*2.56000000E+002*_oneI*_TMP85) - _TMP89)/6.28318548E+000), _r0392.y*((((3.14159274E+000*8.31999969E+001*_oneI*_TMP91 + _TMP94) - 3.14159274E+000*8.31999969E+001*_oneI*_TMP97) - _TMP101)/6.28318548E+000), _r0392.z*((((3.14159274E+000*2.56000004E+001*_oneI*_TMP103 + _TMP106) - 3.14159274E+000*2.56000004E+001*_oneI*_TMP109) - _TMP113)/6.28318548E+000));
    _X = _TMP161 - 2.00000000E+000;
    _c0472 = vec2(TEX0.x - _X*_oneT, TEX0.y);
    _TMP114 = COMPAT_TEXTURE(Texture, _c0472);
    _x0476 = ((_TMP114.x - 6.44531250E-002)*2.56000000E+002)/2.20000000E+002;
    _TMP155 = min(1.00000000E+000, _x0476);
    _TMP475 = max(0.00000000E+000, _TMP155);
    _x0482 = ((_TMP114.y - 6.44531250E-002)*2.56000000E+002)/2.24000000E+002;
    _TMP155 = min(1.00000000E+000, _x0482);
    _TMP481 = max(0.00000000E+000, _TMP155);
    _x0488 = ((_TMP114.z - 6.44531250E-002)*2.56000000E+002)/2.24000000E+002;
    _TMP155 = min(1.00000000E+000, _x0488);
    _TMP487 = max(0.00000000E+000, _TMP155);
    _TMP115 = vec3(_TMP475, _TMP481, _TMP487);
    _r0494.x = dot(_RGB_to_YIQ[0], _TMP115);
    _r0494.y = dot(_RGB_to_YIQ[1], _TMP115);
    _r0494.z = dot(_RGB_to_YIQ[2], _TMP115);
    _TMP116 = abs(_X);
    _a0504 = _TMP116 + 5.00000000E-001;
    _b0504 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP117 = min(_a0504, _b0504);
    _TMP118 = abs(_X);
    _a0508 = _TMP118 + 5.00000000E-001;
    _b0508 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP119 = min(_a0508, _b0508);
    _a0510 = 3.14159274E+000*2.56000000E+002*_oneI*_TMP119;
    _TMP120 = sin(_a0510);
    _TMP121 = abs(_X);
    _a0514 = _TMP121 - 5.00000000E-001;
    _b0514 = -1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP122 = max(_a0514, _b0514);
    _b0516 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP123 = min(_TMP122, _b0516);
    _TMP124 = abs(_X);
    _a0520 = _TMP124 - 5.00000000E-001;
    _b0520 = -1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP125 = max(_a0520, _b0520);
    _b0522 = 1.00000000E+000/(2.56000000E+002*_oneI);
    _TMP126 = min(_TMP125, _b0522);
    _a0524 = 3.14159274E+000*2.56000000E+002*_oneI*_TMP126;
    _TMP127 = sin(_a0524);
    _TMP128 = abs(_X);
    _a0528 = _TMP128 + 5.00000000E-001;
    _b0528 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP129 = min(_a0528, _b0528);
    _TMP130 = abs(_X);
    _a0532 = _TMP130 + 5.00000000E-001;
    _b0532 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP131 = min(_a0532, _b0532);
    _a0534 = 3.14159274E+000*8.31999969E+001*_oneI*_TMP131;
    _TMP132 = sin(_a0534);
    _TMP133 = abs(_X);
    _a0538 = _TMP133 - 5.00000000E-001;
    _b0538 = -1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP134 = max(_a0538, _b0538);
    _b0540 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP135 = min(_TMP134, _b0540);
    _TMP136 = abs(_X);
    _a0544 = _TMP136 - 5.00000000E-001;
    _b0544 = -1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP137 = max(_a0544, _b0544);
    _b0546 = 1.00000000E+000/(8.31999969E+001*_oneI);
    _TMP138 = min(_TMP137, _b0546);
    _a0548 = 3.14159274E+000*8.31999969E+001*_oneI*_TMP138;
    _TMP139 = sin(_a0548);
    _TMP140 = abs(_X);
    _a0552 = _TMP140 + 5.00000000E-001;
    _b0552 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP141 = min(_a0552, _b0552);
    _TMP142 = abs(_X);
    _a0556 = _TMP142 + 5.00000000E-001;
    _b0556 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP143 = min(_a0556, _b0556);
    _a0558 = 3.14159274E+000*2.56000004E+001*_oneI*_TMP143;
    _TMP144 = sin(_a0558);
    _TMP145 = abs(_X);
    _a0562 = _TMP145 - 5.00000000E-001;
    _b0562 = -1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP146 = max(_a0562, _b0562);
    _b0564 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP147 = min(_TMP146, _b0564);
    _TMP148 = abs(_X);
    _a0568 = _TMP148 - 5.00000000E-001;
    _b0568 = -1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP149 = max(_a0568, _b0568);
    _b0570 = 1.00000000E+000/(2.56000004E+001*_oneI);
    _TMP150 = min(_TMP149, _b0570);
    _a0572 = 3.14159274E+000*2.56000004E+001*_oneI*_TMP150;
    _TMP151 = sin(_a0572);
    _tempColor = _tempColor + vec3(_r0494.x*((((3.14159274E+000*2.56000000E+002*_oneI*_TMP117 + _TMP120) - 3.14159274E+000*2.56000000E+002*_oneI*_TMP123) - _TMP127)/6.28318548E+000), _r0494.y*((((3.14159274E+000*8.31999969E+001*_oneI*_TMP129 + _TMP132) - 3.14159274E+000*8.31999969E+001*_oneI*_TMP135) - _TMP139)/6.28318548E+000), _r0494.z*((((3.14159274E+000*2.56000004E+001*_oneI*_TMP141 + _TMP144) - 3.14159274E+000*2.56000004E+001*_oneI*_TMP147) - _TMP151)/6.28318548E+000));
    _r0574.x = dot(_YIQ_to_RGB[0], _tempColor);
    _r0574.y = dot(_YIQ_to_RGB[1], _tempColor);
    _r0574.z = dot(_YIQ_to_RGB[2], _tempColor);
    _ret_0 = vec4(_r0574.x, _r0574.y, _r0574.z, 1.00000000E+000);
    FragColor = _ret_0;
    return;
} 
#endif
