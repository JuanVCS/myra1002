// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _loc;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec2 _loc;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0008;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0008 = VertexCoord.x*MVPMatrix[0];
    _r0008 = _r0008 + VertexCoord.y*MVPMatrix[1];
    _r0008 = _r0008 + VertexCoord.z*MVPMatrix[2];
    _r0008 = _r0008 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(float((1.00000000E+00/TextureSize.x)), float((1.00000000E+00/TextureSize.y)));
    _OUT._t1.xy = vec2(_ps.x, 0.00000000E+00);
    _OUT._t1.zw = vec2(0.00000000E+00, _ps.y);
    _OUT._loc = vec2(float((TexCoord.xy*TextureSize).x), float((TexCoord.xy*TextureSize).y));
    _ret_0._position1 = _r0008;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._loc = _OUT._loc;
    gl_Position = vec4(float(_r0008.x), float(_r0008.y), float(_r0008.z), float(_r0008.w));
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2.xy = _OUT._loc;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2.xy = _ret_0._loc;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _loc;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec2 _loc;
};
vec3 _TMP7;
vec3 _TMP6;
vec3 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
vec2 _val0015;
vec2 _c0019;
vec2 _c0021;
vec2 _c0023;
vec2 _c0025;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _pos;
    vec2 _dir;
    vec2 _g1;
    vec4 _C1;
    _pos = vec2(float(TEX2.x), float(TEX2.y));
    _val0015 = vec2(float((_pos.x > 0.00000000E+00)), float((_pos.y > 0.00000000E+00)));
    _dir = _val0015 - vec2(float((_pos.x < 0.00000000E+00)), float((_pos.y < 0.00000000E+00)));
    _g1 = _dir*vec2(float(TEX1.x), float(TEX1.y));
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _C1 = _TMP0.xyzw;
    _c0019 = TEX0.xy - _g1;
    _TMP1 = COMPAT_TEXTURE(Texture, _c0019);
    _c0021 = TEX0.xy - 2.00000000E+00*_g1;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0021);
    _c0023 = TEX0.xy + _g1;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0023);
    _c0025 = TEX0.xy + 2.00000000E+00*_g1;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0025);
    if (_TMP0.w == 1.00000000E+00 || _TMP1.w == 1.00000000E+00 || _TMP3.w == 1.00000000E+00) { 
        _TMP5 = 2.50000000E-01*(_TMP1.xyz + _TMP3.xyz) + 5.00000000E-01*_TMP0.xyz;
        _C1 = vec4(_TMP5.x, _TMP5.y, _TMP5.z, 1.00000000E+00);
    } else {
        if (_TMP2.w == 1.00000000E+00) { 
            _TMP6 = 5.00000000E-01*(_TMP1.xyz + _TMP0.xyz);
            _C1 = vec4(_TMP6.x, _TMP6.y, _TMP6.z, 1.00000000E+00);
        } else {
            if (_TMP4.w == 1.00000000E+00) { 
                _TMP7 = 5.00000000E-01*(_TMP0.xyz + _TMP3.xyz);
                _C1 = vec4(_TMP7.x, _TMP7.y, _TMP7.z, 1.00000000E+00);
            } 
        } 
    } 
    FragColor = _C1;
    return;
} 
#endif
