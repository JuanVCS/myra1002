// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _loc;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec2 _loc;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _OUT._t1.xy = vec2(_ps.x, 0.00000000E+00);
    _OUT._t1.zw = vec2(0.00000000E+00, _ps.y);
    _OUT._loc = TexCoord.xy*TextureSize;
    _ret_0._position1 = _r0006;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._loc = _OUT._loc;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2.xy = _OUT._loc;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2.xy = _ret_0._loc;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _loc;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec2 _loc;
};
vec4 _ret_0;
float _TMP38;
float _TMP37;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
vec2 _val0054;
vec2 _c0058;
vec2 _c0060;
vec2 _c0062;
vec2 _c0064;
vec2 _c0066;
vec2 _c0068;
vec2 _c0070;
vec2 _c0072;
vec2 _c0074;
vec2 _c0076;
vec2 _c0078;
vec2 _c0080;
float _TMP81;
float _x0086;
float _TMP87;
float _x0092;
float _TMP93;
float _x0098;
float _TMP99;
float _x0104;
float _TMP105;
float _x0110;
float _TMP111;
float _x0116;
float _TMP117;
float _x0122;
float _TMP123;
float _x0128;
float _TMP129;
float _x0134;
float _TMP135;
float _x0140;
float _TMP141;
float _x0146;
float _TMP147;
float _x0152;
float _TMP153;
float _x0158;
float _TMP163;
float _TMP173;
float _TMP183;
float _TMP193;
float _TMP203;
float _TMP213;
float _TMP223;
float _TMP233;
float _TMP243;
float _TMP253;
float _TMP263;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _dir;
    vec2 _g1;
    vec2 _g2;
    float _C;
    float _L1;
    float _L2;
    float _R1;
    float _R2;
    float _U1;
    float _U2;
    float _D1;
    float _D2;
    float _UL;
    float _UR;
    float _DL;
    float _DR;
    _val0054 = vec2(float((TEX2.x > 0.00000000E+00)), float((TEX2.y > 0.00000000E+00)));
    _dir = _val0054 - vec2(float((TEX2.x < 0.00000000E+00)), float((TEX2.y < 0.00000000E+00)));
    _g1 = _dir*TEX1.xy;
    _g2 = _dir*TEX1.zw;
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0058 = TEX0.xy - _g1;
    _TMP1 = COMPAT_TEXTURE(Texture, _c0058);
    _c0060 = TEX0.xy - 2.00000000E+00*_g1;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0060);
    _c0062 = TEX0.xy + _g1;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0062);
    _c0064 = TEX0.xy + 2.00000000E+00*_g1;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0064);
    _c0066 = TEX0.xy - _g2;
    _TMP5 = COMPAT_TEXTURE(Texture, _c0066);
    _c0068 = TEX0.xy - 2.00000000E+00*_g2;
    _TMP6 = COMPAT_TEXTURE(Texture, _c0068);
    _c0070 = TEX0.xy + _g2;
    _TMP7 = COMPAT_TEXTURE(Texture, _c0070);
    _c0072 = TEX0.xy + 2.00000000E+00*_g2;
    _TMP8 = COMPAT_TEXTURE(Texture, _c0072);
    _c0074 = (TEX0.xy - _g1) - _g2;
    _TMP9 = COMPAT_TEXTURE(Texture, _c0074);
    _c0076 = (TEX0.xy + _g1) - _g2;
    _TMP10 = COMPAT_TEXTURE(Texture, _c0076);
    _c0078 = (TEX0.xy - _g1) + _g2;
    _TMP11 = COMPAT_TEXTURE(Texture, _c0078);
    _c0080 = TEX0.xy + _g1 + _g2;
    _TMP12 = COMPAT_TEXTURE(Texture, _c0080);
    _TMP37 = _TMP0.w*1.50000000E+01;
    _x0086 = _TMP37 + 5.00000000E-01;
    _TMP81 = floor(_x0086);
    _C = _TMP81 - 2.00000000E+00;
    _TMP37 = _TMP1.w*1.50000000E+01;
    _x0092 = _TMP37 + 5.00000000E-01;
    _TMP87 = floor(_x0092);
    _L1 = _TMP87 - 2.00000000E+00;
    _TMP37 = _TMP2.w*1.50000000E+01;
    _x0098 = _TMP37 + 5.00000000E-01;
    _TMP93 = floor(_x0098);
    _L2 = _TMP93 - 2.00000000E+00;
    _TMP37 = _TMP3.w*1.50000000E+01;
    _x0104 = _TMP37 + 5.00000000E-01;
    _TMP99 = floor(_x0104);
    _R1 = _TMP99 - 2.00000000E+00;
    _TMP37 = _TMP4.w*1.50000000E+01;
    _x0110 = _TMP37 + 5.00000000E-01;
    _TMP105 = floor(_x0110);
    _R2 = _TMP105 - 2.00000000E+00;
    _TMP37 = _TMP5.w*1.50000000E+01;
    _x0116 = _TMP37 + 5.00000000E-01;
    _TMP111 = floor(_x0116);
    _U1 = _TMP111 - 2.00000000E+00;
    _TMP37 = _TMP6.w*1.50000000E+01;
    _x0122 = _TMP37 + 5.00000000E-01;
    _TMP117 = floor(_x0122);
    _U2 = _TMP117 - 2.00000000E+00;
    _TMP37 = _TMP7.w*1.50000000E+01;
    _x0128 = _TMP37 + 5.00000000E-01;
    _TMP123 = floor(_x0128);
    _D1 = _TMP123 - 2.00000000E+00;
    _TMP37 = _TMP8.w*1.50000000E+01;
    _x0134 = _TMP37 + 5.00000000E-01;
    _TMP129 = floor(_x0134);
    _D2 = _TMP129 - 2.00000000E+00;
    _TMP37 = _TMP9.w*1.50000000E+01;
    _x0140 = _TMP37 + 5.00000000E-01;
    _TMP135 = floor(_x0140);
    _UL = _TMP135 - 2.00000000E+00;
    _TMP37 = _TMP10.w*1.50000000E+01;
    _x0146 = _TMP37 + 5.00000000E-01;
    _TMP141 = floor(_x0146);
    _UR = _TMP141 - 2.00000000E+00;
    _TMP37 = _TMP11.w*1.50000000E+01;
    _x0152 = _TMP37 + 5.00000000E-01;
    _TMP147 = floor(_x0152);
    _DL = _TMP147 - 2.00000000E+00;
    _TMP37 = _TMP12.w*1.50000000E+01;
    _x0158 = _TMP37 + 5.00000000E-01;
    _TMP153 = floor(_x0158);
    _DR = _TMP153 - 2.00000000E+00;
    if (_U1 == 5.00000000E+00 || _D1 == 5.00000000E+00 || _L1 == 5.00000000E+00 || _R1 == 5.00000000E+00 || _UL == 5.00000000E+00 || _UR == 5.00000000E+00 || _DR == 5.00000000E+00 || _DL == 5.00000000E+00) { 
        _TMP38 = min(1.00000000E+00, 4.66666669E-01);
        _TMP163 = max(0.00000000E+00, _TMP38);
        _ret_0 = vec4(_TMP0.x, _TMP0.y, _TMP0.z, _TMP163);
        FragColor = _ret_0;
        return;
    } 
    if (_U1 == 6.00000000E+00 || _L1 == 6.00000000E+00 || _UL == 6.00000000E+00 || _UR == 6.00000000E+00 || _DL == 6.00000000E+00) { 
        _TMP38 = min(1.00000000E+00, 5.33333361E-01);
        _TMP173 = max(0.00000000E+00, _TMP38);
        _ret_0 = vec4(_TMP0.x, _TMP0.y, _TMP0.z, _TMP173);
        FragColor = _ret_0;
        return;
    } 
    if (_U1 == 7.00000000E+00 || _R1 == 7.00000000E+00 || _UL == 7.00000000E+00 || _UR == 7.00000000E+00 || _DR == 7.00000000E+00) { 
        _TMP38 = min(1.00000000E+00, 6.00000024E-01);
        _TMP183 = max(0.00000000E+00, _TMP38);
        _ret_0 = vec4(_TMP0.x, _TMP0.y, _TMP0.z, _TMP183);
        FragColor = _ret_0;
        return;
    } 
    if (_D1 == 8.00000000E+00 || _R1 == 8.00000000E+00 || _UR == 8.00000000E+00 || _DR == 8.00000000E+00 || _DL == 8.00000000E+00) { 
        _TMP38 = min(1.00000000E+00, 6.66666687E-01);
        _TMP193 = max(0.00000000E+00, _TMP38);
        _ret_0 = vec4(_TMP0.x, _TMP0.y, _TMP0.z, _TMP193);
        FragColor = _ret_0;
        return;
    } 
    if (_D1 == 9.00000000E+00 || _L1 == 9.00000000E+00 || _UL == 9.00000000E+00 || _DR == 9.00000000E+00 || _DL == 9.00000000E+00) { 
        _TMP38 = min(1.00000000E+00, 7.33333349E-01);
        _TMP203 = max(0.00000000E+00, _TMP38);
        _ret_0 = vec4(_TMP0.x, _TMP0.y, _TMP0.z, _TMP203);
        FragColor = _ret_0;
        return;
    } 
    if (_L2 == 4.00000000E+00 || _L1 == 4.00000000E+00 || _R1 == 4.00000000E+00 || _R2 == 4.00000000E+00 || _DL == 4.00000000E+00 || _D1 == 4.00000000E+00 || _DR == 4.00000000E+00) { 
        _TMP38 = min(1.00000000E+00, 4.00000006E-01);
        _TMP213 = max(0.00000000E+00, _TMP38);
        _ret_0 = vec4(_TMP0.x, _TMP0.y, _TMP0.z, _TMP213);
        FragColor = _ret_0;
        return;
    } 
    if (_L2 == 3.00000000E+00 || _L1 == 3.00000000E+00 || _R1 == 3.00000000E+00 || _R2 == 3.00000000E+00 || _UL == 3.00000000E+00 || _U1 == 3.00000000E+00 || _UR == 3.00000000E+00) { 
        _TMP38 = min(1.00000000E+00, 3.33333343E-01);
        _TMP223 = max(0.00000000E+00, _TMP38);
        _ret_0 = vec4(_TMP0.x, _TMP0.y, _TMP0.z, _TMP223);
        FragColor = _ret_0;
        return;
    } 
    if (_U2 == 2.00000000E+00 || _U1 == 2.00000000E+00 || _D1 == 2.00000000E+00 || _D2 == 2.00000000E+00 || _UL == 2.00000000E+00 || _L1 == 2.00000000E+00 || _DL == 2.00000000E+00) { 
        _TMP38 = min(1.00000000E+00, 2.66666681E-01);
        _TMP233 = max(0.00000000E+00, _TMP38);
        _ret_0 = vec4(_TMP0.x, _TMP0.y, _TMP0.z, _TMP233);
        FragColor = _ret_0;
        return;
    } 
    if (_U2 == 1.00000000E+00 || _U1 == 1.00000000E+00 || _D1 == 1.00000000E+00 || _D2 == 1.00000000E+00 || _UR == 1.00000000E+00 || _R1 == 1.00000000E+00 || _DR == 1.00000000E+00) { 
        _TMP38 = min(1.00000000E+00, 2.00000003E-01);
        _TMP243 = max(0.00000000E+00, _TMP38);
        _ret_0 = vec4(_TMP0.x, _TMP0.y, _TMP0.z, _TMP243);
        FragColor = _ret_0;
        return;
    } 
    if (_C > 0.00000000E+00) { 
        FragColor = _TMP0.xyzw;
        return;
    } 
    if (_L2 == -1.00000000E+00 || _L1 == -1.00000000E+00 || _R1 == -1.00000000E+00 || _R2 == -1.00000000E+00) { 
        _TMP38 = min(1.00000000E+00, 6.66666701E-02);
        _TMP253 = max(0.00000000E+00, _TMP38);
        _ret_0 = vec4(_TMP0.x, _TMP0.y, _TMP0.z, _TMP253);
        FragColor = _ret_0;
        return;
    } 
    if (_U2 == -2.00000000E+00 || _U1 == -2.00000000E+00 || _D1 == -2.00000000E+00 || _D2 == -2.00000000E+00) { 
        _TMP38 = min(1.00000000E+00, 0.00000000E+00);
        _TMP263 = max(0.00000000E+00, _TMP38);
        _ret_0 = vec4(_TMP0.x, _TMP0.y, _TMP0.z, _TMP263);
        FragColor = _ret_0;
        return;
    } 
    FragColor = _TMP0.xyzw;
    return;
} 
#endif
