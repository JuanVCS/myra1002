// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _loc;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec2 _loc;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _OUT._t1.xy = vec2(_ps.x, 0.00000000E+00);
    _OUT._t1.zw = vec2(0.00000000E+00, _ps.y);
    _OUT._loc = TexCoord.xy*TextureSize;
    _ret_0._position1 = _r0006;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._loc = _OUT._loc;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2.xy = _OUT._loc;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2.xy = _ret_0._loc;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _loc;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec2 _loc;
};
vec4 _ret_0;
bool _TMP51;
bool _TMP50;
bool _TMP49;
bool _TMP48;
bool _TMP47;
bool _TMP46;
bool _TMP45;
bool _TMP44;
bool _TMP43;
bool _TMP42;
bool _TMP41;
bool _TMP40;
bool _TMP39;
bool _TMP38;
bool _TMP37;
bool _TMP36;
bool _TMP35;
bool _TMP34;
bool _TMP33;
bool _TMP32;
float _TMP29;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
uniform sampler2D Texture;
vec2 _val0060;
vec2 _c0064;
vec2 _c0066;
vec2 _c0068;
vec2 _c0070;
vec2 _c0072;
vec2 _c0074;
vec2 _c0076;
vec2 _c0078;
float _TMP79;
float _x0084;
float _TMP85;
float _x0090;
float _TMP91;
float _x0096;
float _TMP97;
float _x0102;
float _TMP103;
float _x0108;
float _TMP109;
float _x0114;
float _TMP115;
float _x0120;
float _TMP121;
float _x0126;
float _TMP127;
float _x0132;
vec3 _TMP133;
vec3 _B0134;
vec3 _W0134;
float _cntB0134;
float _cntW0134;
bool _TMP135;
vec3 _TMP176;
vec3 _TMP178;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _dir;
    vec2 _g1;
    vec2 _g2;
    vec4 _C2;
    vec4 _L11;
    vec4 _R11;
    vec4 _U11;
    vec4 _D11;
    vec4 _UL1;
    vec4 _UR1;
    vec4 _DL1;
    vec4 _DR1;
    _val0060 = vec2(float((TEX2.x > 0.00000000E+00)), float((TEX2.y > 0.00000000E+00)));
    _dir = _val0060 - vec2(float((TEX2.x < 0.00000000E+00)), float((TEX2.y < 0.00000000E+00)));
    _g1 = _dir*TEX1.xy;
    _g2 = _dir*TEX1.zw;
    _TMP8 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0064 = TEX0.xy - _g1;
    _TMP9 = COMPAT_TEXTURE(Texture, _c0064);
    _c0066 = TEX0.xy + _g1;
    _TMP10 = COMPAT_TEXTURE(Texture, _c0066);
    _c0068 = TEX0.xy - _g2;
    _TMP11 = COMPAT_TEXTURE(Texture, _c0068);
    _c0070 = TEX0.xy + _g2;
    _TMP12 = COMPAT_TEXTURE(Texture, _c0070);
    _c0072 = (TEX0.xy - _g1) - _g2;
    _TMP13 = COMPAT_TEXTURE(Texture, _c0072);
    _c0074 = (TEX0.xy + _g1) - _g2;
    _TMP14 = COMPAT_TEXTURE(Texture, _c0074);
    _c0076 = (TEX0.xy - _g1) + _g2;
    _TMP15 = COMPAT_TEXTURE(Texture, _c0076);
    _c0078 = TEX0.xy + _g1 + _g2;
    _TMP16 = COMPAT_TEXTURE(Texture, _c0078);
    _TMP29 = _TMP8.w*1.50000000E+01;
    _x0084 = _TMP29 + 5.00000000E-01;
    _TMP79 = floor(_x0084);
    _C2.w = _TMP79 - 2.00000000E+00;
    _TMP29 = _TMP9.w*1.50000000E+01;
    _x0090 = _TMP29 + 5.00000000E-01;
    _TMP85 = floor(_x0090);
    _L11.w = _TMP85 - 2.00000000E+00;
    _TMP29 = _TMP10.w*1.50000000E+01;
    _x0096 = _TMP29 + 5.00000000E-01;
    _TMP91 = floor(_x0096);
    _R11.w = _TMP91 - 2.00000000E+00;
    _TMP29 = _TMP11.w*1.50000000E+01;
    _x0102 = _TMP29 + 5.00000000E-01;
    _TMP97 = floor(_x0102);
    _U11.w = _TMP97 - 2.00000000E+00;
    _TMP29 = _TMP12.w*1.50000000E+01;
    _x0108 = _TMP29 + 5.00000000E-01;
    _TMP103 = floor(_x0108);
    _D11.w = _TMP103 - 2.00000000E+00;
    _TMP29 = _TMP13.w*1.50000000E+01;
    _x0114 = _TMP29 + 5.00000000E-01;
    _TMP109 = floor(_x0114);
    _UL1.w = _TMP109 - 2.00000000E+00;
    _TMP29 = _TMP14.w*1.50000000E+01;
    _x0120 = _TMP29 + 5.00000000E-01;
    _TMP115 = floor(_x0120);
    _UR1.w = _TMP115 - 2.00000000E+00;
    _TMP29 = _TMP15.w*1.50000000E+01;
    _x0126 = _TMP29 + 5.00000000E-01;
    _TMP121 = floor(_x0126);
    _DL1.w = _TMP121 - 2.00000000E+00;
    _TMP29 = _TMP16.w*1.50000000E+01;
    _x0132 = _TMP29 + 5.00000000E-01;
    _TMP127 = floor(_x0132);
    _DR1.w = _TMP127 - 2.00000000E+00;
    if (_C2.w > 0.00000000E+00) { 
        _TMP135 = true;
        _B0134 = vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);
        _W0134 = vec3( 0.00000000E+00, 0.00000000E+00, 0.00000000E+00);
        _cntB0134 = 0.00000000E+00;
        _cntW0134 = 0.00000000E+00;
        _TMP32 = _TMP13.x == _TMP8.x && _TMP13.y == _TMP8.y && _TMP13.z == _TMP8.z;
        _TMP33 = _TMP13.x == _TMP12.x && _TMP13.y == _TMP12.y && _TMP13.z == _TMP12.z;
        _TMP34 = _TMP13.x == _TMP10.x && _TMP13.y == _TMP10.y && _TMP13.z == _TMP10.z;
        if (_UL1.w > 0.00000000E+00 || _TMP32 || _D11.w > 0.00000000E+00 && _TMP33 || _R11.w > 0.00000000E+00 && _TMP34) { 
            _B0134 = _TMP13.xyz;
            _cntB0134 = 1.00000000E+00;
        } 
        _TMP35 = _TMP14.x == _TMP8.x && _TMP14.y == _TMP8.y && _TMP14.z == _TMP8.z;
        _TMP36 = _TMP14.x == _TMP12.x && _TMP14.y == _TMP12.y && _TMP14.z == _TMP12.z;
        _TMP37 = _TMP14.x == _TMP9.x && _TMP14.y == _TMP9.y && _TMP14.z == _TMP9.z;
        if (_UR1.w > 0.00000000E+00 || _TMP35 || _D11.w > 0.00000000E+00 && _TMP36 || _L11.w > 0.00000000E+00 && _TMP37) { 
            _B0134 = _B0134 + _TMP14.xyz;
            _cntB0134 = _cntB0134 + 1.00000000E+00;
        } 
        _TMP38 = _TMP15.x == _TMP8.x && _TMP15.y == _TMP8.y && _TMP15.z == _TMP8.z;
        _TMP39 = _TMP15.x == _TMP11.x && _TMP15.y == _TMP11.y && _TMP15.z == _TMP11.z;
        _TMP40 = _TMP15.x == _TMP10.x && _TMP15.y == _TMP10.y && _TMP15.z == _TMP10.z;
        if (_DL1.w > 0.00000000E+00 || _TMP38 || _U11.w > 0.00000000E+00 && _TMP39 || _R11.w > 0.00000000E+00 && _TMP40) { 
            _B0134 = _B0134 + _TMP15.xyz;
            _cntB0134 = _cntB0134 + 1.00000000E+00;
        } 
        _TMP41 = _TMP16.x == _TMP8.x && _TMP16.y == _TMP8.y && _TMP16.z == _TMP8.z;
        _TMP42 = _TMP16.x == _TMP11.x && _TMP16.y == _TMP11.y && _TMP16.z == _TMP11.z;
        _TMP43 = _TMP16.x == _TMP9.x && _TMP16.y == _TMP9.y && _TMP16.z == _TMP9.z;
        if (_DR1.w > 0.00000000E+00 || _TMP41 || _U11.w > 0.00000000E+00 && _TMP42 || _L11.w > 0.00000000E+00 && _TMP43) { 
            _B0134 = _B0134 + _TMP16.xyz;
            _cntB0134 = _cntB0134 + 1.00000000E+00;
        } 
        _TMP44 = _TMP11.x == _TMP8.x && _TMP11.y == _TMP8.y && _TMP11.z == _TMP8.z;
        _TMP45 = _TMP11.x == _TMP12.x && _TMP11.y == _TMP12.y && _TMP11.z == _TMP12.z;
        if (_U11.w > 0.00000000E+00 || _TMP44 || _D11.w > 0.00000000E+00 && _TMP45) { 
            _W0134 = _TMP11.xyz;
            _cntW0134 = 1.00000000E+00;
        } 
        _TMP46 = _TMP12.x == _TMP8.x && _TMP12.y == _TMP8.y && _TMP12.z == _TMP8.z;
        _TMP47 = _TMP12.x == _TMP11.x && _TMP12.y == _TMP11.y && _TMP12.z == _TMP11.z;
        if (_D11.w > 0.00000000E+00 || _TMP46 || _U11.w > 0.00000000E+00 && _TMP47) { 
            _W0134 = _W0134 + _TMP12.xyz;
            _cntW0134 = _cntW0134 + 1.00000000E+00;
        } 
        _TMP48 = _TMP9.x == _TMP8.x && _TMP9.y == _TMP8.y && _TMP9.z == _TMP8.z;
        _TMP49 = _TMP9.x == _TMP10.x && _TMP9.y == _TMP10.y && _TMP9.z == _TMP10.z;
        if (_L11.w > 0.00000000E+00 || _TMP48 || _R11.w > 0.00000000E+00 && _TMP49) { 
            _W0134 = _W0134 + _TMP9.xyz;
            _cntW0134 = _cntW0134 + 1.00000000E+00;
        } 
        _TMP50 = _TMP10.x == _TMP8.x && _TMP10.y == _TMP8.y && _TMP10.z == _TMP8.z;
        _TMP51 = _TMP10.x == _TMP9.x && _TMP10.y == _TMP9.y && _TMP10.z == _TMP9.z;
        if (_R11.w > 0.00000000E+00 || _TMP50 || _L11.w > 0.00000000E+00 && _TMP51) { 
            _W0134 = _W0134 + _TMP10.xyz;
            _cntW0134 = _cntW0134 + 1.00000000E+00;
        } 
        if (_cntB0134 == 0.00000000E+00) { 
            if (_cntW0134 == 0.00000000E+00) { 
                _TMP133 = _TMP8.xyz;
                _TMP135 = false;
            } else {
                _TMP133 = 5.00000000E-01*_TMP8.xyz + (1.00000000E+00/(_cntW0134*2.00000000E+00))*_W0134;
                _TMP135 = false;
            } 
        } 
        if (_TMP135) { 
            if (_cntW0134 == 0.00000000E+00) { 
                _TMP133 = 5.00000000E-01*_TMP8.xyz + (1.00000000E+00/(_cntB0134*2.00000000E+00))*_B0134;
            } else {
                _TMP133 = 2.50000000E-01*_TMP8.xyz + (1.00000000E+00/(_cntB0134*4.00000000E+00))*_B0134 + (1.00000000E+00/(_cntW0134*2.00000000E+00))*_W0134;
            } 
        } 
        _ret_0 = vec4(_TMP133.x, _TMP133.y, _TMP133.z, 0.00000000E+00);
        FragColor = _ret_0;
        return;
    } 
    if (_C2.w == -1.00000000E+00) { 
        if (_L11.w == -1.00000000E+00) { 
            if (_R11.w == -1.00000000E+00) { 
                _TMP176 = 5.00000000E-01*_TMP8.xyz + 2.50000000E-01*(_TMP9.xyz + _TMP10.xyz);
            } else {
                _TMP176 = 5.00000000E-01*(_TMP8.xyz + _TMP9.xyz);
            } 
        } else {
            if (_R11.w == -1.00000000E+00) { 
                _TMP176 = 5.00000000E-01*(_TMP8.xyz + _TMP10.xyz);
            } else {
                _TMP176 = _TMP8.xyz;
            } 
        } 
        _ret_0 = vec4(_TMP176.x, _TMP176.y, _TMP176.z, 0.00000000E+00);
        FragColor = _ret_0;
        return;
    } 
    if (_C2.w == -2.00000000E+00) { 
        if (_U11.w == -2.00000000E+00) { 
            if (_D11.w == -2.00000000E+00) { 
                _TMP178 = 5.00000000E-01*_TMP8.xyz + 2.50000000E-01*(_TMP11.xyz + _TMP12.xyz);
            } else {
                _TMP178 = 5.00000000E-01*(_TMP8.xyz + _TMP11.xyz);
            } 
        } else {
            if (_D11.w == -2.00000000E+00) { 
                _TMP178 = 5.00000000E-01*(_TMP8.xyz + _TMP12.xyz);
            } else {
                _TMP178 = _TMP8.xyz;
            } 
        } 
        _ret_0 = vec4(_TMP178.x, _TMP178.y, _TMP178.z, 0.00000000E+00);
        FragColor = _ret_0;
        return;
    } 
    _ret_0 = vec4(_TMP8.x, _TMP8.y, _TMP8.z, 1.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
