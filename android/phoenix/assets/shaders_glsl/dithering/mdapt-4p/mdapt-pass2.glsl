// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _loc;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec2 _loc;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _OUT._t1.xy = vec2(_ps.x, 0.00000000E+00);
    _OUT._t1.zw = vec2(0.00000000E+00, _ps.y);
    _OUT._loc = TexCoord.xy*TextureSize;
    _ret_0._position1 = _r0006;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._loc = _OUT._loc;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2.xy = _OUT._loc;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2.xy = _ret_0._loc;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _loc;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec2 _loc;
};
vec4 _ret_0;
float _TMP154;
float _TMP153;
int _TMP74;
vec4 _TMP75;
int _TMP71;
vec4 _TMP72;
int _TMP68;
vec4 _TMP69;
int _TMP65;
vec4 _TMP66;
int _TMP62;
vec4 _TMP63;
int _TMP59;
vec4 _TMP60;
int _TMP56;
vec4 _TMP57;
int _TMP53;
vec4 _TMP54;
int _TMP50;
vec4 _TMP51;
int _TMP47;
vec4 _TMP48;
int _TMP44;
vec4 _TMP45;
int _TMP41;
vec4 _TMP42;
int _TMP38;
vec4 _TMP39;
int _TMP35;
vec4 _TMP36;
int _TMP32;
vec4 _TMP33;
int _TMP29;
vec4 _TMP30;
int _TMP26;
vec4 _TMP27;
int _TMP23;
vec4 _TMP24;
int _TMP20;
vec4 _TMP21;
int _TMP17;
vec4 _TMP18;
int _TMP14;
vec4 _TMP15;
int _TMP11;
vec4 _TMP12;
int _TMP8;
vec4 _TMP9;
int _TMP5;
vec4 _TMP6;
int _TMP2;
vec4 _TMP3;
vec4 _TMP0;
uniform sampler2D Texture;
vec2 _val0160;
float _TMP163;
float _x0168;
vec2 _c0170;
float _TMP171;
float _x0176;
vec2 _c0178;
float _TMP179;
float _x0184;
vec2 _c0186;
float _TMP187;
float _x0192;
vec2 _c0194;
float _TMP195;
float _x0200;
vec2 _c0202;
float _TMP203;
float _x0208;
vec2 _c0210;
float _TMP211;
float _x0216;
vec2 _c0218;
float _TMP219;
float _x0224;
vec2 _c0226;
float _TMP227;
float _x0232;
vec2 _c0234;
float _TMP235;
float _x0240;
vec2 _c0242;
float _TMP243;
float _x0248;
vec2 _c0250;
float _TMP251;
float _x0256;
vec2 _c0258;
float _TMP259;
float _x0264;
float _TMP267;
float _x0272;
vec2 _c0274;
float _TMP275;
float _x0280;
vec2 _c0282;
float _TMP283;
float _x0288;
vec2 _c0290;
float _TMP291;
float _x0296;
vec2 _c0298;
float _TMP299;
float _x0304;
vec2 _c0306;
float _TMP307;
float _x0312;
vec2 _c0314;
float _TMP315;
float _x0320;
vec2 _c0322;
float _TMP323;
float _x0328;
vec2 _c0330;
float _TMP331;
float _x0336;
vec2 _c0338;
float _TMP339;
float _x0344;
vec2 _c0346;
float _TMP347;
float _x0352;
vec2 _c0354;
float _TMP355;
float _x0360;
vec2 _c0362;
float _TMP363;
float _x0368;
float _TMP573;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _dir;
    vec2 _g1;
    vec2 _g2;
    float _C;
    int _hits;
    _val0160 = vec2(float((TEX2.x > 0.00000000E+00)), float((TEX2.y > 0.00000000E+00)));
    _dir = _val0160 - vec2(float((TEX2.x < 0.00000000E+00)), float((TEX2.y < 0.00000000E+00)));
    _g1 = _dir*TEX1.xy;
    _g2 = _dir*TEX1.zw;
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP153 = _TMP0.w*1.50000000E+01;
    _x0168 = _TMP153 + 5.00000000E-01;
    _TMP163 = floor(_x0168);
    _C = _TMP163 - 2.00000000E+00;
    if (_C == 0.00000000E+00) { 
        FragColor = _TMP0.xyzw;
        return;
    } 
    if (_C > 0.00000000E+00) { 
        _c0170 = TEX0.xy + -2.00000000E+00*_g1 + -2.00000000E+00*_g2;
        _TMP3 = COMPAT_TEXTURE(Texture, _c0170);
        _TMP153 = _TMP3.w*1.50000000E+01;
        _x0176 = _TMP153 + 5.00000000E-01;
        _TMP171 = floor(_x0176);
        if (_TMP171 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP2 = 1;
        } else {
            _TMP2 = 0;
        } 
        _c0178 = TEX0.xy + -2.00000000E+00*_g1 + -_g2;
        _TMP6 = COMPAT_TEXTURE(Texture, _c0178);
        _TMP153 = _TMP6.w*1.50000000E+01;
        _x0184 = _TMP153 + 5.00000000E-01;
        _TMP179 = floor(_x0184);
        if (_TMP179 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP5 = 1;
        } else {
            _TMP5 = 0;
        } 
        _hits = _TMP2 + _TMP5;
        _c0186 = TEX0.xy + -2.00000000E+00*_g1;
        _TMP9 = COMPAT_TEXTURE(Texture, _c0186);
        _TMP153 = _TMP9.w*1.50000000E+01;
        _x0192 = _TMP153 + 5.00000000E-01;
        _TMP187 = floor(_x0192);
        if (_TMP187 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP8 = 1;
        } else {
            _TMP8 = 0;
        } 
        _hits = _hits + _TMP8;
        _c0194 = TEX0.xy + -2.00000000E+00*_g1 + _g2;
        _TMP12 = COMPAT_TEXTURE(Texture, _c0194);
        _TMP153 = _TMP12.w*1.50000000E+01;
        _x0200 = _TMP153 + 5.00000000E-01;
        _TMP195 = floor(_x0200);
        if (_TMP195 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP11 = 1;
        } else {
            _TMP11 = 0;
        } 
        _hits = _hits + _TMP11;
        _c0202 = TEX0.xy + -2.00000000E+00*_g1 + 2.00000000E+00*_g2;
        _TMP15 = COMPAT_TEXTURE(Texture, _c0202);
        _TMP153 = _TMP15.w*1.50000000E+01;
        _x0208 = _TMP153 + 5.00000000E-01;
        _TMP203 = floor(_x0208);
        if (_TMP203 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP14 = 1;
        } else {
            _TMP14 = 0;
        } 
        _hits = _hits + _TMP14;
        _c0210 = TEX0.xy + -_g1 + -2.00000000E+00*_g2;
        _TMP18 = COMPAT_TEXTURE(Texture, _c0210);
        _TMP153 = _TMP18.w*1.50000000E+01;
        _x0216 = _TMP153 + 5.00000000E-01;
        _TMP211 = floor(_x0216);
        if (_TMP211 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP17 = 1;
        } else {
            _TMP17 = 0;
        } 
        _hits = _hits + _TMP17;
        _c0218 = TEX0.xy + -_g1 + -_g2;
        _TMP21 = COMPAT_TEXTURE(Texture, _c0218);
        _TMP153 = _TMP21.w*1.50000000E+01;
        _x0224 = _TMP153 + 5.00000000E-01;
        _TMP219 = floor(_x0224);
        if (_TMP219 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP20 = 1;
        } else {
            _TMP20 = 0;
        } 
        _hits = _hits + _TMP20;
        _c0226 = TEX0.xy + -_g1;
        _TMP24 = COMPAT_TEXTURE(Texture, _c0226);
        _TMP153 = _TMP24.w*1.50000000E+01;
        _x0232 = _TMP153 + 5.00000000E-01;
        _TMP227 = floor(_x0232);
        if (_TMP227 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP23 = 1;
        } else {
            _TMP23 = 0;
        } 
        _hits = _hits + _TMP23;
        _c0234 = TEX0.xy + -_g1 + _g2;
        _TMP27 = COMPAT_TEXTURE(Texture, _c0234);
        _TMP153 = _TMP27.w*1.50000000E+01;
        _x0240 = _TMP153 + 5.00000000E-01;
        _TMP235 = floor(_x0240);
        if (_TMP235 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP26 = 1;
        } else {
            _TMP26 = 0;
        } 
        _hits = _hits + _TMP26;
        _c0242 = TEX0.xy + -_g1 + 2.00000000E+00*_g2;
        _TMP30 = COMPAT_TEXTURE(Texture, _c0242);
        _TMP153 = _TMP30.w*1.50000000E+01;
        _x0248 = _TMP153 + 5.00000000E-01;
        _TMP243 = floor(_x0248);
        if (_TMP243 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP29 = 1;
        } else {
            _TMP29 = 0;
        } 
        _hits = _hits + _TMP29;
        _c0250 = TEX0.xy + -2.00000000E+00*_g2;
        _TMP33 = COMPAT_TEXTURE(Texture, _c0250);
        _TMP153 = _TMP33.w*1.50000000E+01;
        _x0256 = _TMP153 + 5.00000000E-01;
        _TMP251 = floor(_x0256);
        if (_TMP251 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP32 = 1;
        } else {
            _TMP32 = 0;
        } 
        _hits = _hits + _TMP32;
        _c0258 = TEX0.xy + -_g2;
        _TMP36 = COMPAT_TEXTURE(Texture, _c0258);
        _TMP153 = _TMP36.w*1.50000000E+01;
        _x0264 = _TMP153 + 5.00000000E-01;
        _TMP259 = floor(_x0264);
        if (_TMP259 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP35 = 1;
        } else {
            _TMP35 = 0;
        } 
        _hits = _hits + _TMP35;
        _TMP39 = COMPAT_TEXTURE(Texture, TEX0.xy);
        _TMP153 = _TMP39.w*1.50000000E+01;
        _x0272 = _TMP153 + 5.00000000E-01;
        _TMP267 = floor(_x0272);
        if (_TMP267 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP38 = 1;
        } else {
            _TMP38 = 0;
        } 
        _hits = _hits + _TMP38;
        _c0274 = TEX0.xy + _g2;
        _TMP42 = COMPAT_TEXTURE(Texture, _c0274);
        _TMP153 = _TMP42.w*1.50000000E+01;
        _x0280 = _TMP153 + 5.00000000E-01;
        _TMP275 = floor(_x0280);
        if (_TMP275 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP41 = 1;
        } else {
            _TMP41 = 0;
        } 
        _hits = _hits + _TMP41;
        _c0282 = TEX0.xy + 2.00000000E+00*_g2;
        _TMP45 = COMPAT_TEXTURE(Texture, _c0282);
        _TMP153 = _TMP45.w*1.50000000E+01;
        _x0288 = _TMP153 + 5.00000000E-01;
        _TMP283 = floor(_x0288);
        if (_TMP283 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP44 = 1;
        } else {
            _TMP44 = 0;
        } 
        _hits = _hits + _TMP44;
        _c0290 = TEX0.xy + _g1 + -2.00000000E+00*_g2;
        _TMP48 = COMPAT_TEXTURE(Texture, _c0290);
        _TMP153 = _TMP48.w*1.50000000E+01;
        _x0296 = _TMP153 + 5.00000000E-01;
        _TMP291 = floor(_x0296);
        if (_TMP291 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP47 = 1;
        } else {
            _TMP47 = 0;
        } 
        _hits = _hits + _TMP47;
        _c0298 = TEX0.xy + _g1 + -_g2;
        _TMP51 = COMPAT_TEXTURE(Texture, _c0298);
        _TMP153 = _TMP51.w*1.50000000E+01;
        _x0304 = _TMP153 + 5.00000000E-01;
        _TMP299 = floor(_x0304);
        if (_TMP299 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP50 = 1;
        } else {
            _TMP50 = 0;
        } 
        _hits = _hits + _TMP50;
        _c0306 = TEX0.xy + _g1;
        _TMP54 = COMPAT_TEXTURE(Texture, _c0306);
        _TMP153 = _TMP54.w*1.50000000E+01;
        _x0312 = _TMP153 + 5.00000000E-01;
        _TMP307 = floor(_x0312);
        if (_TMP307 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP53 = 1;
        } else {
            _TMP53 = 0;
        } 
        _hits = _hits + _TMP53;
        _c0314 = TEX0.xy + _g1 + _g2;
        _TMP57 = COMPAT_TEXTURE(Texture, _c0314);
        _TMP153 = _TMP57.w*1.50000000E+01;
        _x0320 = _TMP153 + 5.00000000E-01;
        _TMP315 = floor(_x0320);
        if (_TMP315 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP56 = 1;
        } else {
            _TMP56 = 0;
        } 
        _hits = _hits + _TMP56;
        _c0322 = TEX0.xy + _g1 + 2.00000000E+00*_g2;
        _TMP60 = COMPAT_TEXTURE(Texture, _c0322);
        _TMP153 = _TMP60.w*1.50000000E+01;
        _x0328 = _TMP153 + 5.00000000E-01;
        _TMP323 = floor(_x0328);
        if (_TMP323 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP59 = 1;
        } else {
            _TMP59 = 0;
        } 
        _hits = _hits + _TMP59;
        _c0330 = TEX0.xy + 2.00000000E+00*_g1 + -2.00000000E+00*_g2;
        _TMP63 = COMPAT_TEXTURE(Texture, _c0330);
        _TMP153 = _TMP63.w*1.50000000E+01;
        _x0336 = _TMP153 + 5.00000000E-01;
        _TMP331 = floor(_x0336);
        if (_TMP331 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP62 = 1;
        } else {
            _TMP62 = 0;
        } 
        _hits = _hits + _TMP62;
        _c0338 = TEX0.xy + 2.00000000E+00*_g1 + -_g2;
        _TMP66 = COMPAT_TEXTURE(Texture, _c0338);
        _TMP153 = _TMP66.w*1.50000000E+01;
        _x0344 = _TMP153 + 5.00000000E-01;
        _TMP339 = floor(_x0344);
        if (_TMP339 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP65 = 1;
        } else {
            _TMP65 = 0;
        } 
        _hits = _hits + _TMP65;
        _c0346 = TEX0.xy + 2.00000000E+00*_g1;
        _TMP69 = COMPAT_TEXTURE(Texture, _c0346);
        _TMP153 = _TMP69.w*1.50000000E+01;
        _x0352 = _TMP153 + 5.00000000E-01;
        _TMP347 = floor(_x0352);
        if (_TMP347 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP68 = 1;
        } else {
            _TMP68 = 0;
        } 
        _hits = _hits + _TMP68;
        _c0354 = TEX0.xy + 2.00000000E+00*_g1 + _g2;
        _TMP72 = COMPAT_TEXTURE(Texture, _c0354);
        _TMP153 = _TMP72.w*1.50000000E+01;
        _x0360 = _TMP153 + 5.00000000E-01;
        _TMP355 = floor(_x0360);
        if (_TMP355 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP71 = 1;
        } else {
            _TMP71 = 0;
        } 
        _hits = _hits + _TMP71;
        _c0362 = TEX0.xy + 2.00000000E+00*_g1 + 2.00000000E+00*_g2;
        _TMP75 = COMPAT_TEXTURE(Texture, _c0362);
        _TMP153 = _TMP75.w*1.50000000E+01;
        _x0368 = _TMP153 + 5.00000000E-01;
        _TMP363 = floor(_x0368);
        if (_TMP363 - 2.00000000E+00 > 0.00000000E+00) { 
            _TMP74 = 1;
        } else {
            _TMP74 = 0;
        } 
        _hits = _hits + _TMP74;
    } else {
        FragColor = _TMP0.xyzw;
        return;
    } 
    if (_hits < 3) { 
        _TMP154 = min(1.00000000E+00, 1.33333340E-01);
        _TMP573 = max(0.00000000E+00, _TMP154);
        _ret_0 = vec4(_TMP0.x, _TMP0.y, _TMP0.z, _TMP573);
        FragColor = _ret_0;
        return;
    } else {
        FragColor = _TMP0.xyzw;
        return;
    } 
    FragColor = _ret_0;
} 
#endif
