// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _loc;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec4 _t1;
    vec2 _loc;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _OUT._t1.xy = vec2(_ps.x, 0.00000000E+00);
    _OUT._t1.zw = vec2(0.00000000E+00, _ps.y);
    _OUT._loc = TexCoord.xy*TextureSize;
    _ret_0._position1 = _r0006;
    _ret_0._texCoord1 = TexCoord.xy;
    _ret_0._t1 = _OUT._t1;
    _ret_0._loc = _OUT._loc;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    TEX1 = _OUT._t1;
    TEX2.xy = _OUT._loc;
    return;
    TEX0.xy = _ret_0._texCoord1;
    TEX1 = _ret_0._t1;
    TEX2.xy = _ret_0._loc;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _loc;
COMPAT_VARYING     vec4 _t1;
COMPAT_VARYING     vec2 _texCoord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec2 _texCoord;
    vec4 _t1;
    vec2 _loc;
};
vec4 _ret_0;
float _TMP80;
bool _TMP78;
bool _TMP77;
bool _TMP76;
bool _TMP75;
bool _TMP74;
bool _TMP73;
bool _TMP72;
bool _TMP71;
bool _TMP70;
bool _TMP69;
bool _TMP68;
bool _TMP67;
bool _TMP66;
bool _TMP65;
bool _TMP64;
bool _TMP63;
bool _TMP62;
bool _TMP61;
bool _TMP60;
bool _TMP59;
bool _TMP58;
bool _TMP57;
bool _TMP56;
bool _TMP55;
bool _TMP54;
bool _TMP53;
bool _TMP52;
bool _TMP51;
bool _TMP50;
bool _TMP49;
bool _TMP48;
bool _TMP47;
bool _TMP46;
bool _TMP45;
bool _TMP44;
bool _TMP43;
bool _TMP42;
bool _TMP41;
bool _TMP40;
bool _TMP39;
bool _TMP38;
bool _TMP37;
bool _TMP36;
bool _TMP35;
bool _TMP34;
bool _TMP33;
bool _TMP32;
bool _TMP31;
bool _TMP30;
bool _TMP29;
bool _TMP28;
bool _TMP27;
bool _TMP26;
bool _TMP25;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
uniform sampler2D Texture;
vec2 _val0086;
vec2 _c0090;
vec2 _c0092;
vec2 _c0094;
vec2 _c0096;
vec2 _c0098;
vec2 _c0100;
vec2 _c0102;
vec2 _c0104;
vec2 _c0106;
vec2 _c0108;
vec2 _c0110;
vec2 _c0112;
vec2 _c0114;
vec2 _c0116;
vec2 _c0118;
vec2 _c0120;
vec2 _c0122;
vec2 _c0124;
vec2 _c0126;
vec2 _c0128;
float _TMP137;
float _TMP141;
float _TMP145;
float _TMP149;
float _TMP153;
float _TMP157;
float _TMP161;
float _TMP165;
float _TMP169;
float _TMP173;
float _TMP181;
float _TMP189;
float _TMP197;
float _TMP205;
float _TMP209;
float _TMP213;
float _TMP217;
float _TMP221;
float _TMP225;
float _TMP229;
float _TMP233;
float _v0354;
float _x0356;
float _TMP357;
COMPAT_VARYING vec4 TEX0;
COMPAT_VARYING vec4 TEX1;
COMPAT_VARYING vec4 TEX2;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _dir;
    vec2 _g1;
    vec2 _g2;
    float _type;
    _val0086 = vec2(float((TEX2.x > 0.00000000E+00)), float((TEX2.y > 0.00000000E+00)));
    _dir = _val0086 - vec2(float((TEX2.x < 0.00000000E+00)), float((TEX2.y < 0.00000000E+00)));
    _g1 = _dir*TEX1.xy;
    _g2 = _dir*TEX1.zw;
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0090 = TEX0.xy - _g1;
    _TMP1 = COMPAT_TEXTURE(Texture, _c0090);
    _c0092 = TEX0.xy - 2.00000000E+00*_g1;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0092);
    _c0094 = TEX0.xy + _g1;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0094);
    _c0096 = TEX0.xy + 2.00000000E+00*_g1;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0096);
    _c0098 = TEX0.xy - _g2;
    _TMP5 = COMPAT_TEXTURE(Texture, _c0098);
    _c0100 = TEX0.xy - 2.00000000E+00*_g2;
    _TMP6 = COMPAT_TEXTURE(Texture, _c0100);
    _c0102 = TEX0.xy + _g2;
    _TMP7 = COMPAT_TEXTURE(Texture, _c0102);
    _c0104 = TEX0.xy + 2.00000000E+00*_g2;
    _TMP8 = COMPAT_TEXTURE(Texture, _c0104);
    _c0106 = (TEX0.xy - _g1) - _g2;
    _TMP9 = COMPAT_TEXTURE(Texture, _c0106);
    _c0108 = (TEX0.xy + _g1) - _g2;
    _TMP10 = COMPAT_TEXTURE(Texture, _c0108);
    _c0110 = (TEX0.xy - _g1) + _g2;
    _TMP11 = COMPAT_TEXTURE(Texture, _c0110);
    _c0112 = TEX0.xy + _g1 + _g2;
    _TMP12 = COMPAT_TEXTURE(Texture, _c0112);
    _c0114 = (TEX0.xy - 2.00000000E+00*_g1) - _g2;
    _TMP13 = COMPAT_TEXTURE(Texture, _c0114);
    _c0116 = (TEX0.xy - _g1) - 2.00000000E+00*_g2;
    _TMP14 = COMPAT_TEXTURE(Texture, _c0116);
    _c0118 = (TEX0.xy + _g1) - 2.00000000E+00*_g2;
    _TMP15 = COMPAT_TEXTURE(Texture, _c0118);
    _c0120 = (TEX0.xy + 2.00000000E+00*_g1) - _g2;
    _TMP16 = COMPAT_TEXTURE(Texture, _c0120);
    _c0122 = TEX0.xy + 2.00000000E+00*_g1 + _g2;
    _TMP17 = COMPAT_TEXTURE(Texture, _c0122);
    _c0124 = TEX0.xy + _g1 + 2.00000000E+00*_g2;
    _TMP18 = COMPAT_TEXTURE(Texture, _c0124);
    _c0126 = (TEX0.xy - _g1) + 2.00000000E+00*_g2;
    _TMP19 = COMPAT_TEXTURE(Texture, _c0126);
    _c0128 = (TEX0.xy - 2.00000000E+00*_g1) + _g2;
    _TMP20 = COMPAT_TEXTURE(Texture, _c0128);
    _TMP137 = dot(_TMP0.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP141 = dot(_TMP1.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP145 = dot(_TMP5.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP149 = dot(_TMP2.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP153 = dot(_TMP6.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP157 = dot(_TMP3.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP161 = dot(_TMP7.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP165 = dot(_TMP4.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP169 = dot(_TMP8.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP173 = dot(_TMP9.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP181 = dot(_TMP10.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP189 = dot(_TMP11.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP197 = dot(_TMP12.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP205 = dot(_TMP13.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP209 = dot(_TMP17.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP213 = dot(_TMP14.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP217 = dot(_TMP18.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP221 = dot(_TMP15.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP225 = dot(_TMP19.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP229 = dot(_TMP16.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _TMP233 = dot(_TMP20.xyz, vec3( 6.55360000E+04, 2.55000000E+02, 1.00000000E+00));
    _type = 0.00000000E+00;
    _TMP25 = _TMP137 == _TMP161;
    _TMP26 = _TMP137 == _TMP145;
    _TMP27 = _TMP137 == _TMP141;
    _TMP28 = _TMP137 == _TMP157;
    if (!_TMP25 && !_TMP26 && !_TMP27 && !_TMP28) { 
        if (_TMP137 == _TMP173) { 
            if (_TMP137 == _TMP181) { 
                if (_TMP137 == _TMP197) { 
                    if (_TMP137 == _TMP189) { 
                        _type = 5.00000000E+00;
                    } else {
                        _TMP29 = _TMP161 == _TMP141;
                        _TMP30 = _TMP161 == _TMP189;
                        if (!_TMP29 || _TMP30) { 
                            _type = 9.00000000E+00;
                        } 
                    } 
                } else {
                    _TMP31 = _TMP137 == _TMP189;
                    _TMP32 = _TMP161 == _TMP157;
                    _TMP33 = _TMP161 == _TMP197;
                    if (_TMP31 && (!_TMP32 || _TMP33)) { 
                        _type = 8.00000000E+00;
                    } 
                } 
            } else {
                _TMP34 = _TMP137 == _TMP197;
                _TMP35 = _TMP137 == _TMP189;
                _TMP36 = _TMP145 == _TMP157;
                _TMP37 = _TMP145 == _TMP181;
                if (_TMP34 && _TMP35 && (!_TMP36 || _TMP37)) { 
                    _type = 7.00000000E+00;
                } 
            } 
        } else {
            _TMP38 = _TMP137 == _TMP181;
            _TMP39 = _TMP137 == _TMP197;
            _TMP40 = _TMP137 == _TMP189;
            _TMP41 = _TMP145 == _TMP141;
            _TMP42 = _TMP145 == _TMP173;
            if (_TMP38 && _TMP39 && _TMP40 && (!_TMP41 || _TMP42)) { 
                _type = 6.00000000E+00;
            } 
        } 
    } else {
        _TMP43 = _TMP137 == _TMP149;
        _TMP44 = _TMP137 == _TMP165;
        _TMP45 = _TMP137 == _TMP173;
        _TMP46 = _TMP137 == _TMP181;
        _TMP47 = _TMP137 == _TMP141;
        _TMP48 = _TMP137 == _TMP157;
        _TMP49 = _TMP137 == _TMP205;
        _TMP50 = _TMP137 == _TMP145;
        _TMP51 = _TMP137 == _TMP229;
        if (_TMP43 && _TMP44 && _TMP45 && _TMP46 && !_TMP47 && !_TMP48 && !_TMP49 && !_TMP50 && !_TMP51) { 
            _type = 4.00000000E+00;
        } else {
            _TMP52 = _TMP137 == _TMP149;
            _TMP53 = _TMP137 == _TMP165;
            _TMP54 = _TMP137 == _TMP189;
            _TMP55 = _TMP137 == _TMP197;
            _TMP56 = _TMP137 == _TMP141;
            _TMP57 = _TMP137 == _TMP157;
            _TMP58 = _TMP137 == _TMP233;
            _TMP59 = _TMP137 == _TMP161;
            _TMP60 = _TMP137 == _TMP209;
            if (_TMP52 && _TMP53 && _TMP54 && _TMP55 && !_TMP56 && !_TMP57 && !_TMP58 && !_TMP59 && !_TMP60) { 
                _type = 3.00000000E+00;
            } else {
                _TMP61 = _TMP137 == _TMP153;
                _TMP62 = _TMP137 == _TMP169;
                _TMP63 = _TMP137 == _TMP181;
                _TMP64 = _TMP137 == _TMP197;
                _TMP65 = _TMP137 == _TMP145;
                _TMP66 = _TMP137 == _TMP161;
                _TMP67 = _TMP137 == _TMP157;
                _TMP68 = _TMP137 == _TMP221;
                _TMP69 = _TMP137 == _TMP217;
                if (_TMP61 && _TMP62 && _TMP63 && _TMP64 && !_TMP65 && !_TMP66 && !_TMP67 && !_TMP68 && !_TMP69) { 
                    _type = 2.00000000E+00;
                } else {
                    _TMP70 = _TMP137 == _TMP153;
                    _TMP71 = _TMP137 == _TMP169;
                    _TMP72 = _TMP137 == _TMP173;
                    _TMP73 = _TMP137 == _TMP189;
                    _TMP74 = _TMP137 == _TMP145;
                    _TMP75 = _TMP137 == _TMP161;
                    _TMP76 = _TMP137 == _TMP141;
                    _TMP77 = _TMP137 == _TMP213;
                    _TMP78 = _TMP137 == _TMP225;
                    if (_TMP70 && _TMP71 && _TMP72 && _TMP73 && !_TMP74 && !_TMP75 && !_TMP76 && !_TMP77 && !_TMP78) { 
                        _type = 1.00000000E+00;
                    } 
                } 
            } 
        } 
    } 
    _v0354 = _type + 2.00000000E+00;
    _x0356 = _v0354/1.50000000E+01;
    _TMP80 = min(1.00000000E+00, _x0356);
    _TMP357 = max(0.00000000E+00, _TMP80);
    _ret_0 = vec4(_TMP0.x, _TMP0.y, _TMP0.z, _TMP357);
    FragColor = _ret_0;
    return;
} 
#endif
