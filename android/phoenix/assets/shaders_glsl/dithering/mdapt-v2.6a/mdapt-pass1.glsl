// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARor;
COMPAT_VARYING     vec2 VARtex;
COMPAT_VARYING     vec2 _tex_coord;
struct previous {
float _placeholder23;
    vec2 _tex_coord;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
float _placeholder31;
};
struct tex_coords {
    vec2 VARtex;
    vec2 VARor;
};
vec4 _oPosition1;
tex_coords _coords1;
previous _ORIG1;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_ATTRIBUTE vec4 VertexCoord;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
COMPAT_ATTRIBUTE vec2 OrigTexCoord;
void main()
{
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0007;
    VARtex = TexCoord.xy;
    VARor = OrigTexCoord;
    gl_Position = _r0007;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _or1;
COMPAT_VARYING     vec2 _tex;
COMPAT_VARYING     vec2 _tex_coord;
struct previous {
float _placeholder23;
    vec2 _tex_coord;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
float _placeholder31;
};
struct tex_coords {
    vec2 _tex;
    vec2 _or1;
};
vec2 _ret_0;
float _TMP49;
float _TMP48;
float _TMP47;
float _TMP46;
float _TMP45;
float _TMP44;
float _TMP43;
float _TMP40;
float _TMP51;
float _TMP50;
bool _TMP41;
float _TMP19;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
input_dummy _IN1;
previous _ORIG1;
vec2 _c0057;
vec2 _c0059;
vec2 _c0061;
vec2 _c0063;
vec2 _c0065;
vec2 _c0067;
vec2 _c0069;
vec2 _c0071;
vec2 _c0075;
vec2 _c0077;
vec2 _c0079;
vec2 _c0081;
vec2 _c0083;
vec2 _c0085;
bvec3 _a0097;
float _TMP98;
vec3 _diff0099;
float _ravg0099;
float _a0101;
float _x0107;
float _TMP108;
bvec3 _a0117;
float _TMP118;
vec3 _diff0119;
float _ravg0119;
float _a0121;
float _x0127;
float _TMP128;
float _TMP134;
float _TMP138;
float _TMP142;
bvec3 _a0151;
float _TMP152;
vec3 _diff0153;
float _ravg0153;
float _a0155;
float _x0161;
float _TMP162;
bvec3 _a0171;
float _TMP172;
vec3 _diff0173;
float _ravg0173;
float _a0175;
float _x0181;
float _TMP182;
bvec3 _a0191;
float _TMP192;
vec3 _diff0193;
float _ravg0193;
float _a0195;
float _x0201;
float _TMP202;
bvec3 _a0211;
float _TMP212;
vec3 _diff0213;
float _ravg0213;
float _a0215;
float _x0221;
float _TMP222;
float _TMP228;
float _TMP234;
float _TMP240;
float _TMP244;
float _TMP252;
float _TMP258;
float _TMP264;
float _TMP268;
float _TMP276;
float _TMP282;
float _TMP288;
float _TMP292;
float _TMP300;
float _TMP306;
float _TMP312;
float _TMP316;
float _TMP324;
float _TMP332;
COMPAT_VARYING vec4 TEX0;
 
uniform sampler2D Texture;
uniform sampler2D OrigTexture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _t1;
    vec4 _C;
    bool _bS;
    float _eqLxU;
    float _eqLxD;
    float _eqRxU;
    _t1 = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _C = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0057 = TEX0.xy + vec2( -1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP0 = COMPAT_TEXTURE(Texture, _c0057);
    _c0059 = TEX0.xy + vec2( 1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP1 = COMPAT_TEXTURE(Texture, _c0059);
    _c0061 = TEX0.xy + vec2( 0.00000000E+00, 1.00000000E+00)*_t1;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0061);
    _c0063 = TEX0.xy + vec2( 0.00000000E+00, -1.00000000E+00)*_t1;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0063);
    _c0065 = TEX0.xy + -_t1;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0065);
    _c0067 = TEX0.xy + vec2( 1.00000000E+00, -1.00000000E+00)*_t1;
    _TMP5 = COMPAT_TEXTURE(Texture, _c0067);
    _c0069 = TEX0.xy + vec2( -1.00000000E+00, 1.00000000E+00)*_t1;
    _TMP6 = COMPAT_TEXTURE(Texture, _c0069);
    _c0071 = TEX0.xy + _t1;
    _TMP7 = COMPAT_TEXTURE(Texture, _c0071);
    _TMP8 = COMPAT_TEXTURE(OrigTexture, TEX0.xy);
    _c0075 = TEX0.xy + vec2( -1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP9 = COMPAT_TEXTURE(OrigTexture, _c0075);
    _c0077 = TEX0.xy + vec2( -2.00000000E+00, 0.00000000E+00)*_t1;
    _TMP10 = COMPAT_TEXTURE(OrigTexture, _c0077);
    _c0079 = TEX0.xy + vec2( 1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP11 = COMPAT_TEXTURE(OrigTexture, _c0079);
    _c0081 = TEX0.xy + vec2( 2.00000000E+00, 0.00000000E+00)*_t1;
    _TMP12 = COMPAT_TEXTURE(OrigTexture, _c0081);
    _c0083 = TEX0.xy + vec2( 0.00000000E+00, 1.00000000E+00)*_t1;
    _TMP13 = COMPAT_TEXTURE(OrigTexture, _c0083);
    _c0085 = TEX0.xy + vec2( 0.00000000E+00, -1.00000000E+00)*_t1;
    _TMP14 = COMPAT_TEXTURE(OrigTexture, _c0085);
    _bS = bool(_C.w);
    if (_bS) { 
        _a0097 = bvec3(_TMP8.x == _TMP10.x, _TMP8.y == _TMP10.y, _TMP8.z == _TMP10.z);
        _TMP41 = _a0097.x && _a0097.y && _a0097.z;
        _TMP40 = float(_TMP41);
    } else {
        _diff0099 = _TMP8.xyz - _TMP10.xyz;
        _ravg0099 = (_TMP8.x + _TMP10.x)*5.00000000E-01;
        _diff0099 = _diff0099*_diff0099*vec3(2.00000000E+00 + _ravg0099, 4.00000000E+00, 3.00000000E+00 - _ravg0099);
        _a0101 = _diff0099.x + _diff0099.y + _diff0099.z;
        _TMP50 = inversesqrt(_a0101);
        _TMP98 = 1.00000000E+00/_TMP50;
        _x0107 = (_TMP98 - 3.00000000E+00)/-3.00000000E+00;
        _TMP51 = min(1.00000000E+00, _x0107);
        _TMP108 = max(0.00000000E+00, _TMP51);
        _TMP40 = _TMP108*_TMP108*(3.00000000E+00 - 2.00000000E+00*_TMP108);
    } 
    _TMP19 = _TMP40;
    if (_bS) { 
        _a0117 = bvec3(_TMP8.x == _TMP12.x, _TMP8.y == _TMP12.y, _TMP8.z == _TMP12.z);
        _TMP41 = _a0117.x && _a0117.y && _a0117.z;
        _TMP40 = float(_TMP41);
    } else {
        _diff0119 = _TMP8.xyz - _TMP12.xyz;
        _ravg0119 = (_TMP8.x + _TMP12.x)*5.00000000E-01;
        _diff0119 = _diff0119*_diff0119*vec3(2.00000000E+00 + _ravg0119, 4.00000000E+00, 3.00000000E+00 - _ravg0119);
        _a0121 = _diff0119.x + _diff0119.y + _diff0119.z;
        _TMP50 = inversesqrt(_a0121);
        _TMP118 = 1.00000000E+00/_TMP50;
        _x0127 = (_TMP118 - 3.00000000E+00)/-3.00000000E+00;
        _TMP51 = min(1.00000000E+00, _x0127);
        _TMP128 = max(0.00000000E+00, _TMP51);
        _TMP40 = _TMP128*_TMP128*(3.00000000E+00 - 2.00000000E+00*_TMP128);
    } 
    _TMP134 = min(_TMP19, _TMP40);
    _TMP138 = max(_C.x, _TMP134);
    _TMP43 = min(_TMP0.x, _TMP1.x);
    _TMP142 = min(_TMP138, _TMP43);
    if (_bS) { 
        _a0151 = bvec3(_TMP9.x == _TMP14.x, _TMP9.y == _TMP14.y, _TMP9.z == _TMP14.z);
        _TMP41 = _a0151.x && _a0151.y && _a0151.z;
        _TMP40 = float(_TMP41);
    } else {
        _diff0153 = _TMP9.xyz - _TMP14.xyz;
        _ravg0153 = (_TMP9.x + _TMP14.x)*5.00000000E-01;
        _diff0153 = _diff0153*_diff0153*vec3(2.00000000E+00 + _ravg0153, 4.00000000E+00, 3.00000000E+00 - _ravg0153);
        _a0155 = _diff0153.x + _diff0153.y + _diff0153.z;
        _TMP50 = inversesqrt(_a0155);
        _TMP152 = 1.00000000E+00/_TMP50;
        _x0161 = (_TMP152 - 3.00000000E+00)/-3.00000000E+00;
        _TMP51 = min(1.00000000E+00, _x0161);
        _TMP162 = max(0.00000000E+00, _TMP51);
        _TMP40 = _TMP162*_TMP162*(3.00000000E+00 - 2.00000000E+00*_TMP162);
    } 
    _eqLxU = _TMP40;
    if (_bS) { 
        _a0171 = bvec3(_TMP9.x == _TMP13.x, _TMP9.y == _TMP13.y, _TMP9.z == _TMP13.z);
        _TMP41 = _a0171.x && _a0171.y && _a0171.z;
        _TMP40 = float(_TMP41);
    } else {
        _diff0173 = _TMP9.xyz - _TMP13.xyz;
        _ravg0173 = (_TMP9.x + _TMP13.x)*5.00000000E-01;
        _diff0173 = _diff0173*_diff0173*vec3(2.00000000E+00 + _ravg0173, 4.00000000E+00, 3.00000000E+00 - _ravg0173);
        _a0175 = _diff0173.x + _diff0173.y + _diff0173.z;
        _TMP50 = inversesqrt(_a0175);
        _TMP172 = 1.00000000E+00/_TMP50;
        _x0181 = (_TMP172 - 3.00000000E+00)/-3.00000000E+00;
        _TMP51 = min(1.00000000E+00, _x0181);
        _TMP182 = max(0.00000000E+00, _TMP51);
        _TMP40 = _TMP182*_TMP182*(3.00000000E+00 - 2.00000000E+00*_TMP182);
    } 
    _eqLxD = _TMP40;
    if (_bS) { 
        _a0191 = bvec3(_TMP11.x == _TMP14.x, _TMP11.y == _TMP14.y, _TMP11.z == _TMP14.z);
        _TMP41 = _a0191.x && _a0191.y && _a0191.z;
        _TMP40 = float(_TMP41);
    } else {
        _diff0193 = _TMP11.xyz - _TMP14.xyz;
        _ravg0193 = (_TMP11.x + _TMP14.x)*5.00000000E-01;
        _diff0193 = _diff0193*_diff0193*vec3(2.00000000E+00 + _ravg0193, 4.00000000E+00, 3.00000000E+00 - _ravg0193);
        _a0195 = _diff0193.x + _diff0193.y + _diff0193.z;
        _TMP50 = inversesqrt(_a0195);
        _TMP192 = 1.00000000E+00/_TMP50;
        _x0201 = (_TMP192 - 3.00000000E+00)/-3.00000000E+00;
        _TMP51 = min(1.00000000E+00, _x0201);
        _TMP202 = max(0.00000000E+00, _TMP51);
        _TMP40 = _TMP202*_TMP202*(3.00000000E+00 - 2.00000000E+00*_TMP202);
    } 
    _eqRxU = _TMP40;
    if (_bS) { 
        _a0211 = bvec3(_TMP11.x == _TMP13.x, _TMP11.y == _TMP13.y, _TMP11.z == _TMP13.z);
        _TMP41 = _a0211.x && _a0211.y && _a0211.z;
        _TMP40 = float(_TMP41);
    } else {
        _diff0213 = _TMP11.xyz - _TMP13.xyz;
        _ravg0213 = (_TMP11.x + _TMP13.x)*5.00000000E-01;
        _diff0213 = _diff0213*_diff0213*vec3(2.00000000E+00 + _ravg0213, 4.00000000E+00, 3.00000000E+00 - _ravg0213);
        _a0215 = _diff0213.x + _diff0213.y + _diff0213.z;
        _TMP50 = inversesqrt(_a0215);
        _TMP212 = 1.00000000E+00/_TMP50;
        _x0221 = (_TMP212 - 3.00000000E+00)/-3.00000000E+00;
        _TMP51 = min(1.00000000E+00, _x0221);
        _TMP222 = max(0.00000000E+00, _TMP51);
        _TMP40 = _TMP222*_TMP222*(3.00000000E+00 - 2.00000000E+00*_TMP222);
    } 
    _TMP43 = min(_eqLxU, _eqRxU);
    _TMP228 = min(_TMP3.x, _TMP43);
    _TMP43 = min(_eqLxD, _TMP40);
    _TMP234 = min(_TMP2.x, _TMP43);
    _TMP240 = max(_TMP228, _TMP234);
    _TMP44 = min(_TMP1.z, _TMP240);
    _TMP45 = min(_TMP0.z, _TMP44);
    _TMP244 = min(_C.x, _TMP45);
    _TMP43 = min(_eqLxU, _eqLxD);
    _TMP252 = min(_TMP0.y, _TMP43);
    _TMP43 = min(_eqRxU, _TMP40);
    _TMP258 = min(_TMP1.y, _TMP43);
    _TMP264 = max(_TMP252, _TMP258);
    _TMP44 = min(_TMP2.z, _TMP264);
    _TMP45 = min(_TMP3.z, _TMP44);
    _TMP268 = min(_C.y, _TMP45);
    _TMP43 = min(_TMP3.z, _TMP5.z);
    _TMP276 = min(_TMP4.z, _TMP43);
    _TMP43 = min(_TMP2.z, _TMP7.z);
    _TMP282 = min(_TMP6.z, _TMP43);
    _TMP288 = max(_TMP276, _TMP282);
    _TMP44 = min(_TMP1.x, _TMP288);
    _TMP45 = min(_TMP0.x, _TMP44);
    _TMP292 = min(_C.x, _TMP45);
    _TMP43 = min(_TMP0.z, _TMP6.z);
    _TMP300 = min(_TMP4.z, _TMP43);
    _TMP43 = min(_TMP1.z, _TMP7.z);
    _TMP306 = min(_TMP5.z, _TMP43);
    _TMP312 = max(_TMP300, _TMP306);
    _TMP44 = min(_TMP2.y, _TMP312);
    _TMP45 = min(_TMP3.y, _TMP44);
    _TMP316 = min(_C.y, _TMP45);
    _TMP44 = min(_TMP3.z, _TMP2.z);
    _TMP45 = min(_TMP1.z, _TMP44);
    _TMP324 = min(_TMP0.z, _TMP45);
    _TMP46 = max(_TMP316, _TMP324);
    _TMP47 = max(_TMP292, _TMP46);
    _TMP48 = max(_TMP268, _TMP47);
    _TMP49 = max(_TMP244, _TMP48);
    _TMP332 = max(_C.z, _TMP49);
    _ret_0 = vec2(_TMP142, _TMP332);
    FragColor.xy = _ret_0;
    return;
} 
#endif
