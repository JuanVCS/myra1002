// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARorg;
COMPAT_VARYING     vec2 VARtex;
COMPAT_VARYING     vec2 _tex_coord;
struct previous {
float _placeholder23;
    vec2 _tex_coord;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
float _placeholder31;
};
struct tex_coords {
    vec2 VARtex;
    vec2 VARorg;
};
vec4 _oPosition1;
tex_coords _coords1;
previous _ORIG1;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_ATTRIBUTE vec4 VertexCoord;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
COMPAT_ATTRIBUTE vec2 OrigTexCoord;
void main()
{
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0007;
    VARtex = TexCoord.xy;
    VARorg = OrigTexCoord;
    gl_Position = _r0007;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _org;
COMPAT_VARYING     vec2 _tex;
COMPAT_VARYING     vec2 _tex_coord;
struct previous {
float _placeholder23;
    vec2 _tex_coord;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
float _placeholder31;
};
struct tex_coords {
    vec2 _tex;
    vec2 _org;
};
float _TMP51;
float _TMP50;
float _TMP49;
float _TMP48;
float _TMP47;
float _TMP46;
float _TMP45;
float _TMP44;
float _TMP43;
float _TMP42;
vec4 _TMP21;
vec4 _TMP20;
vec4 _TMP19;
vec4 _TMP18;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
input_dummy _IN1;
previous _ORIG1;
vec2 _c0059;
vec2 _c0061;
vec2 _c0063;
vec2 _c0065;
vec2 _c0067;
vec2 _c0069;
vec2 _c0071;
vec2 _c0073;
vec2 _c0075;
vec2 _c0077;
vec2 _c0079;
vec2 _c0081;
vec2 _c0083;
vec2 _c0085;
vec2 _c0087;
vec2 _c0089;
vec2 _c0091;
vec2 _c0093;
vec2 _c0095;
vec2 _c0097;
bool _TMP98;
bvec3 _a0101;
float _TMP102;
float _b0103;
bool _TMP106;
bvec3 _a0109;
float _TMP110;
float _b0111;
float _TMP114;
bool _TMP124;
bvec3 _a0127;
float _TMP128;
float _b0129;
bool _TMP132;
bvec3 _a0135;
float _TMP136;
float _b0137;
bool _TMP140;
bvec3 _a0143;
float _TMP144;
float _b0145;
bool _TMP148;
bvec3 _a0151;
float _TMP152;
float _b0153;
bool _TMP156;
bvec3 _a0159;
float _TMP160;
float _b0161;
bool _TMP164;
bvec3 _a0167;
float _TMP168;
float _b0169;
bool _TMP172;
bvec3 _a0175;
float _TMP176;
float _b0177;
bool _TMP180;
bvec3 _a0183;
float _TMP184;
float _b0185;
float _TMP188;
COMPAT_VARYING vec4 TEX0;
 
uniform sampler2D Texture;
uniform sampler2D OrigTexture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _t1;
    vec2 _C;
    _t1 = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP1 = COMPAT_TEXTURE(OrigTexture, TEX0.xy);
    _c0059 = TEX0.xy + vec2( -1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0059);
    _c0061 = TEX0.xy + vec2( -1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP3 = COMPAT_TEXTURE(OrigTexture, _c0061);
    _c0063 = TEX0.xy + vec2( -2.00000000E+00, 0.00000000E+00)*_t1;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0063);
    _c0065 = TEX0.xy + vec2( -2.00000000E+00, 0.00000000E+00)*_t1;
    _TMP5 = COMPAT_TEXTURE(OrigTexture, _c0065);
    _c0067 = TEX0.xy + vec2( 1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP6 = COMPAT_TEXTURE(Texture, _c0067);
    _c0069 = TEX0.xy + vec2( 1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP7 = COMPAT_TEXTURE(OrigTexture, _c0069);
    _c0071 = TEX0.xy + vec2( 2.00000000E+00, 0.00000000E+00)*_t1;
    _TMP8 = COMPAT_TEXTURE(Texture, _c0071);
    _c0073 = TEX0.xy + vec2( 2.00000000E+00, 0.00000000E+00)*_t1;
    _TMP9 = COMPAT_TEXTURE(OrigTexture, _c0073);
    _c0075 = TEX0.xy + vec2( 0.00000000E+00, -1.00000000E+00)*_t1;
    _TMP10 = COMPAT_TEXTURE(Texture, _c0075);
    _c0077 = TEX0.xy + vec2( 0.00000000E+00, -1.00000000E+00)*_t1;
    _TMP11 = COMPAT_TEXTURE(OrigTexture, _c0077);
    _c0079 = TEX0.xy + vec2( 0.00000000E+00, 1.00000000E+00)*_t1;
    _TMP12 = COMPAT_TEXTURE(Texture, _c0079);
    _c0081 = TEX0.xy + vec2( 0.00000000E+00, 1.00000000E+00)*_t1;
    _TMP13 = COMPAT_TEXTURE(OrigTexture, _c0081);
    _c0083 = TEX0.xy + -_t1;
    _TMP14 = COMPAT_TEXTURE(Texture, _c0083);
    _c0085 = TEX0.xy + -_t1;
    _TMP15 = COMPAT_TEXTURE(OrigTexture, _c0085);
    _c0087 = TEX0.xy + vec2( 1.00000000E+00, -1.00000000E+00)*_t1;
    _TMP16 = COMPAT_TEXTURE(Texture, _c0087);
    _c0089 = TEX0.xy + vec2( 1.00000000E+00, -1.00000000E+00)*_t1;
    _TMP17 = COMPAT_TEXTURE(OrigTexture, _c0089);
    _c0091 = TEX0.xy + vec2( -1.00000000E+00, 1.00000000E+00)*_t1;
    _TMP18 = COMPAT_TEXTURE(Texture, _c0091);
    _c0093 = TEX0.xy + vec2( -1.00000000E+00, 1.00000000E+00)*_t1;
    _TMP19 = COMPAT_TEXTURE(OrigTexture, _c0093);
    _c0095 = TEX0.xy + _t1;
    _TMP20 = COMPAT_TEXTURE(Texture, _c0095);
    _c0097 = TEX0.xy + _t1;
    _TMP21 = COMPAT_TEXTURE(OrigTexture, _c0097);
    _a0101 = bvec3(_TMP1.x == _TMP5.x, _TMP1.y == _TMP5.y, _TMP1.z == _TMP5.z);
    _TMP98 = _a0101.x && _a0101.y && _a0101.z;
    _b0103 = float(_TMP98);
    _TMP102 = min(_TMP4.x, _b0103);
    _a0109 = bvec3(_TMP1.x == _TMP9.x, _TMP1.y == _TMP9.y, _TMP1.z == _TMP9.z);
    _TMP106 = _a0109.x && _a0109.y && _a0109.z;
    _b0111 = float(_TMP106);
    _TMP110 = min(_TMP8.x, _b0111);
    _TMP42 = max(_TMP102, _TMP110);
    _TMP43 = max(_TMP6.x, _TMP42);
    _TMP44 = max(_TMP2.x, _TMP43);
    _TMP114 = max(_TMP0.x, _TMP44);
    _C.x = _TMP114;
    _a0127 = bvec3(_TMP1.x == _TMP11.x, _TMP1.y == _TMP11.y, _TMP1.z == _TMP11.z);
    _TMP124 = _a0127.x && _a0127.y && _a0127.z;
    _b0129 = float(_TMP124);
    _TMP128 = min(_TMP10.y, _b0129);
    _a0135 = bvec3(_TMP1.x == _TMP13.x, _TMP1.y == _TMP13.y, _TMP1.z == _TMP13.z);
    _TMP132 = _a0135.x && _a0135.y && _a0135.z;
    _b0137 = float(_TMP132);
    _TMP136 = min(_TMP12.y, _b0137);
    _a0143 = bvec3(_TMP1.x == _TMP3.x, _TMP1.y == _TMP3.y, _TMP1.z == _TMP3.z);
    _TMP140 = _a0143.x && _a0143.y && _a0143.z;
    _b0145 = float(_TMP140);
    _TMP144 = min(_TMP2.y, _b0145);
    _a0151 = bvec3(_TMP1.x == _TMP7.x, _TMP1.y == _TMP7.y, _TMP1.z == _TMP7.z);
    _TMP148 = _a0151.x && _a0151.y && _a0151.z;
    _b0153 = float(_TMP148);
    _TMP152 = min(_TMP6.y, _b0153);
    _a0159 = bvec3(_TMP1.x == _TMP15.x, _TMP1.y == _TMP15.y, _TMP1.z == _TMP15.z);
    _TMP156 = _a0159.x && _a0159.y && _a0159.z;
    _b0161 = float(_TMP156);
    _TMP160 = min(_TMP14.y, _b0161);
    _a0167 = bvec3(_TMP1.x == _TMP17.x, _TMP1.y == _TMP17.y, _TMP1.z == _TMP17.z);
    _TMP164 = _a0167.x && _a0167.y && _a0167.z;
    _b0169 = float(_TMP164);
    _TMP168 = min(_TMP16.y, _b0169);
    _a0175 = bvec3(_TMP1.x == _TMP19.x, _TMP1.y == _TMP19.y, _TMP1.z == _TMP19.z);
    _TMP172 = _a0175.x && _a0175.y && _a0175.z;
    _b0177 = float(_TMP172);
    _TMP176 = min(_TMP18.y, _b0177);
    _a0183 = bvec3(_TMP1.x == _TMP21.x, _TMP1.y == _TMP21.y, _TMP1.z == _TMP21.z);
    _TMP180 = _a0183.x && _a0183.y && _a0183.z;
    _b0185 = float(_TMP180);
    _TMP184 = min(_TMP20.y, _b0185);
    _TMP45 = max(_TMP176, _TMP184);
    _TMP46 = max(_TMP168, _TMP45);
    _TMP47 = max(_TMP160, _TMP46);
    _TMP48 = max(_TMP152, _TMP47);
    _TMP49 = max(_TMP144, _TMP48);
    _TMP50 = max(_TMP136, _TMP49);
    _TMP51 = max(_TMP128, _TMP50);
    _TMP188 = max(_TMP0.y, _TMP51);
    _C.y = _TMP188;
    FragColor.xy = _C;
    return;
} 
#endif
