// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARorg;
COMPAT_VARYING     vec2 VARtex;
COMPAT_VARYING     vec2 _tex_coord;
struct previous {
float _placeholder23;
    vec2 _tex_coord;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
float _placeholder31;
};
struct tex_coords {
    vec2 VARtex;
    vec2 VARorg;
};
vec4 _oPosition1;
tex_coords _coords1;
previous _ORIG1;
vec4 _r0007;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_ATTRIBUTE vec4 VertexCoord;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
COMPAT_ATTRIBUTE vec2 OrigTexCoord;
void main()
{
    _r0007 = VertexCoord.x*MVPMatrix[0];
    _r0007 = _r0007 + VertexCoord.y*MVPMatrix[1];
    _r0007 = _r0007 + VertexCoord.z*MVPMatrix[2];
    _r0007 = _r0007 + VertexCoord.w*MVPMatrix[3];
    _oPosition1 = _r0007;
    VARtex = TexCoord.xy;
    VARorg = OrigTexCoord;
    gl_Position = _r0007;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 _org;
COMPAT_VARYING     vec2 _tex;
COMPAT_VARYING     vec2 _tex_coord;
struct previous {
float _placeholder23;
    vec2 _tex_coord;
};
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
float _placeholder31;
};
struct tex_coords {
    vec2 _tex;
    vec2 _org;
};
vec3 _TMP46;
float _TMP56;
float _TMP55;
float _TMP54;
float _TMP53;
float _TMP52;
float _TMP51;
float _TMP50;
float _TMP49;
float _TMP48;
float _TMP47;
vec4 _TMP17;
vec4 _TMP16;
vec4 _TMP15;
vec4 _TMP14;
vec4 _TMP13;
vec4 _TMP12;
vec4 _TMP11;
vec4 _TMP10;
vec4 _TMP9;
vec4 _TMP8;
vec4 _TMP7;
vec4 _TMP6;
vec4 _TMP5;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
input_dummy _IN1;
previous _ORIG1;
vec2 _c0064;
vec2 _c0066;
vec2 _c0068;
vec2 _c0070;
vec2 _c0072;
vec2 _c0074;
vec2 _c0076;
vec2 _c0078;
vec2 _c0080;
vec2 _c0082;
vec2 _c0084;
vec2 _c0086;
vec2 _c0088;
vec2 _c0090;
vec2 _c0092;
vec2 _c0094;
bool _TMP95;
bvec3 _a0098;
bool _TMP99;
bvec3 _a0102;
bool _TMP103;
bvec3 _a0106;
bool _TMP107;
bvec3 _a0110;
bool _TMP111;
bvec3 _a0114;
bool _TMP115;
bvec3 _a0118;
bool _TMP119;
bvec3 _a0122;
bool _TMP123;
bvec3 _a0126;
bool _TMP127;
bvec3 _a0130;
bool _TMP131;
bvec3 _a0134;
bool _TMP135;
bvec3 _a0138;
float _TMP139;
float _b0140;
bool _TMP143;
bvec3 _a0146;
float _TMP147;
float _b0148;
float _TMP151;
float _b0152;
bool _TMP159;
bvec3 _a0162;
float _TMP163;
float _b0164;
bool _TMP167;
bvec3 _a0170;
float _TMP171;
float _b0172;
float _TMP175;
float _b0176;
bool _TMP183;
bvec3 _a0186;
float _TMP187;
float _b0188;
bool _TMP191;
bvec3 _a0194;
float _TMP195;
float _b0196;
float _TMP199;
float _b0200;
bool _TMP207;
bvec3 _a0210;
float _TMP211;
float _b0212;
bool _TMP215;
bvec3 _a0218;
float _TMP219;
float _b0220;
float _TMP223;
float _b0224;
float _TMP231;
float _b0232;
float _TMP235;
float _b0236;
float _TMP241;
float _b0242;
float _TMP245;
float _b0246;
float _TMP251;
float _b0252;
float _TMP255;
float _b0256;
float _TMP261;
float _b0262;
float _TMP265;
float _b0266;
float _TMP271;
float _b0272;
float _TMP275;
float _b0276;
float _TMP279;
float _b0280;
float _TMP283;
float _b0284;
float _TMP287;
float _b0288;
float _TMP291;
float _b0292;
float _TMP295;
float _b0296;
float _TMP299;
float _b0300;
float _TMP303;
COMPAT_VARYING vec4 TEX0;
 
uniform sampler2D Texture;
uniform sampler2D OrigTexture;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec2 _t1;
    vec3 _fCB;
    vec3 _B1;
    vec3 _W;
    float _cntB;
    float _cntW;
    _t1 = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _TMP1 = COMPAT_TEXTURE(OrigTexture, TEX0.xy);
    _c0064 = TEX0.xy + vec2( -1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0064);
    _c0066 = TEX0.xy + vec2( -1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP3 = COMPAT_TEXTURE(OrigTexture, _c0066);
    _c0068 = TEX0.xy + vec2( 1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0068);
    _c0070 = TEX0.xy + vec2( 1.00000000E+00, 0.00000000E+00)*_t1;
    _TMP5 = COMPAT_TEXTURE(OrigTexture, _c0070);
    _c0072 = TEX0.xy + vec2( 0.00000000E+00, -1.00000000E+00)*_t1;
    _TMP6 = COMPAT_TEXTURE(Texture, _c0072);
    _c0074 = TEX0.xy + vec2( 0.00000000E+00, -1.00000000E+00)*_t1;
    _TMP7 = COMPAT_TEXTURE(OrigTexture, _c0074);
    _c0076 = TEX0.xy + vec2( 0.00000000E+00, 1.00000000E+00)*_t1;
    _TMP8 = COMPAT_TEXTURE(Texture, _c0076);
    _c0078 = TEX0.xy + vec2( 0.00000000E+00, 1.00000000E+00)*_t1;
    _TMP9 = COMPAT_TEXTURE(OrigTexture, _c0078);
    _c0080 = TEX0.xy + -_t1;
    _TMP10 = COMPAT_TEXTURE(Texture, _c0080);
    _c0082 = TEX0.xy + -_t1;
    _TMP11 = COMPAT_TEXTURE(OrigTexture, _c0082);
    _c0084 = TEX0.xy + vec2( 1.00000000E+00, -1.00000000E+00)*_t1;
    _TMP12 = COMPAT_TEXTURE(Texture, _c0084);
    _c0086 = TEX0.xy + vec2( 1.00000000E+00, -1.00000000E+00)*_t1;
    _TMP13 = COMPAT_TEXTURE(OrigTexture, _c0086);
    _c0088 = TEX0.xy + vec2( -1.00000000E+00, 1.00000000E+00)*_t1;
    _TMP14 = COMPAT_TEXTURE(Texture, _c0088);
    _c0090 = TEX0.xy + vec2( -1.00000000E+00, 1.00000000E+00)*_t1;
    _TMP15 = COMPAT_TEXTURE(OrigTexture, _c0090);
    _c0092 = TEX0.xy + _t1;
    _TMP16 = COMPAT_TEXTURE(Texture, _c0092);
    _c0094 = TEX0.xy + _t1;
    _TMP17 = COMPAT_TEXTURE(OrigTexture, _c0094);
    _a0098 = bvec3(_TMP1.x == _TMP3.x, _TMP1.y == _TMP3.y, _TMP1.z == _TMP3.z);
    _TMP95 = _a0098.x && _a0098.y && _a0098.z;
    _a0102 = bvec3(_TMP1.x == _TMP5.x, _TMP1.y == _TMP5.y, _TMP1.z == _TMP5.z);
    _TMP99 = _a0102.x && _a0102.y && _a0102.z;
    _a0106 = bvec3(_TMP1.x == _TMP7.x, _TMP1.y == _TMP7.y, _TMP1.z == _TMP7.z);
    _TMP103 = _a0106.x && _a0106.y && _a0106.z;
    _a0110 = bvec3(_TMP1.x == _TMP9.x, _TMP1.y == _TMP9.y, _TMP1.z == _TMP9.z);
    _TMP107 = _a0110.x && _a0110.y && _a0110.z;
    _a0114 = bvec3(_TMP1.x == _TMP11.x, _TMP1.y == _TMP11.y, _TMP1.z == _TMP11.z);
    _TMP111 = _a0114.x && _a0114.y && _a0114.z;
    _a0118 = bvec3(_TMP1.x == _TMP13.x, _TMP1.y == _TMP13.y, _TMP1.z == _TMP13.z);
    _TMP115 = _a0118.x && _a0118.y && _a0118.z;
    _a0122 = bvec3(_TMP1.x == _TMP15.x, _TMP1.y == _TMP15.y, _TMP1.z == _TMP15.z);
    _TMP119 = _a0122.x && _a0122.y && _a0122.z;
    _a0126 = bvec3(_TMP1.x == _TMP17.x, _TMP1.y == _TMP17.y, _TMP1.z == _TMP17.z);
    _TMP123 = _a0126.x && _a0126.y && _a0126.z;
    _a0130 = bvec3(_TMP7.x == _TMP9.x, _TMP7.y == _TMP9.y, _TMP7.z == _TMP9.z);
    _TMP127 = _a0130.x && _a0130.y && _a0130.z;
    _a0134 = bvec3(_TMP3.x == _TMP5.x, _TMP3.y == _TMP5.y, _TMP3.z == _TMP5.z);
    _TMP131 = _a0134.x && _a0134.y && _a0134.z;
    _a0138 = bvec3(_TMP11.x == _TMP9.x, _TMP11.y == _TMP9.y, _TMP11.z == _TMP9.z);
    _TMP135 = _a0138.x && _a0138.y && _a0138.z;
    _b0140 = float(_TMP135);
    _TMP139 = min(_TMP8.y, _b0140);
    _a0146 = bvec3(_TMP11.x == _TMP5.x, _TMP11.y == _TMP5.y, _TMP11.z == _TMP5.z);
    _TMP143 = _a0146.x && _a0146.y && _a0146.z;
    _b0148 = float(_TMP143);
    _TMP147 = min(_TMP4.y, _b0148);
    _b0152 = float(_TMP111);
    _TMP47 = max(_TMP139, _TMP147);
    _TMP48 = max(_b0152, _TMP47);
    _TMP151 = max(_TMP10.y, _TMP48);
    _a0162 = bvec3(_TMP13.x == _TMP9.x, _TMP13.y == _TMP9.y, _TMP13.z == _TMP9.z);
    _TMP159 = _a0162.x && _a0162.y && _a0162.z;
    _b0164 = float(_TMP159);
    _TMP163 = min(_TMP8.y, _b0164);
    _a0170 = bvec3(_TMP13.x == _TMP3.x, _TMP13.y == _TMP3.y, _TMP13.z == _TMP3.z);
    _TMP167 = _a0170.x && _a0170.y && _a0170.z;
    _b0172 = float(_TMP167);
    _TMP171 = min(_TMP2.y, _b0172);
    _b0176 = float(_TMP115);
    _TMP47 = max(_TMP163, _TMP171);
    _TMP48 = max(_b0176, _TMP47);
    _TMP175 = max(_TMP12.y, _TMP48);
    _a0186 = bvec3(_TMP15.x == _TMP7.x, _TMP15.y == _TMP7.y, _TMP15.z == _TMP7.z);
    _TMP183 = _a0186.x && _a0186.y && _a0186.z;
    _b0188 = float(_TMP183);
    _TMP187 = min(_TMP6.y, _b0188);
    _a0194 = bvec3(_TMP15.x == _TMP5.x, _TMP15.y == _TMP5.y, _TMP15.z == _TMP5.z);
    _TMP191 = _a0194.x && _a0194.y && _a0194.z;
    _b0196 = float(_TMP191);
    _TMP195 = min(_TMP4.y, _b0196);
    _b0200 = float(_TMP119);
    _TMP47 = max(_TMP187, _TMP195);
    _TMP48 = max(_b0200, _TMP47);
    _TMP199 = max(_TMP14.y, _TMP48);
    _a0210 = bvec3(_TMP17.x == _TMP7.x, _TMP17.y == _TMP7.y, _TMP17.z == _TMP7.z);
    _TMP207 = _a0210.x && _a0210.y && _a0210.z;
    _b0212 = float(_TMP207);
    _TMP211 = min(_TMP6.y, _b0212);
    _a0218 = bvec3(_TMP17.x == _TMP3.x, _TMP17.y == _TMP3.y, _TMP17.z == _TMP3.z);
    _TMP215 = _a0218.x && _a0218.y && _a0218.z;
    _b0220 = float(_TMP215);
    _TMP219 = min(_TMP2.y, _b0220);
    _b0224 = float(_TMP123);
    _TMP47 = max(_TMP211, _TMP219);
    _TMP48 = max(_b0224, _TMP47);
    _TMP223 = max(_TMP16.y, _TMP48);
    _b0232 = float(_TMP127);
    _TMP231 = min(_TMP8.y, _b0232);
    _b0236 = float(_TMP103);
    _TMP49 = max(_b0236, _TMP231);
    _TMP235 = max(_TMP6.y, _TMP49);
    _b0242 = float(_TMP127);
    _TMP241 = min(_TMP6.y, _b0242);
    _b0246 = float(_TMP107);
    _TMP49 = max(_b0246, _TMP241);
    _TMP245 = max(_TMP8.y, _TMP49);
    _b0252 = float(_TMP131);
    _TMP251 = min(_TMP4.y, _b0252);
    _b0256 = float(_TMP95);
    _TMP49 = max(_b0256, _TMP251);
    _TMP255 = max(_TMP2.y, _TMP49);
    _b0262 = float(_TMP131);
    _TMP261 = min(_TMP2.y, _b0262);
    _b0266 = float(_TMP99);
    _TMP49 = max(_b0266, _TMP261);
    _TMP265 = max(_TMP4.y, _TMP49);
    _B1 = _TMP151*_TMP11.xyz + _TMP175*_TMP13.xyz + _TMP199*_TMP15.xyz + _TMP223*_TMP17.xyz;
    _W = _TMP235*_TMP7.xyz + _TMP245*_TMP9.xyz + _TMP255*_TMP3.xyz + _TMP265*_TMP5.xyz;
    _cntB = _TMP151 + _TMP175 + _TMP199 + _TMP223;
    _cntW = _TMP235 + _TMP245 + _TMP255 + _TMP265;
    _fCB = (4.00000000E+00*_TMP1.xyz + _B1 + 2.00000000E+00*_W)/(4.00000000E+00 + _cntB + 2.00000000E+00*_cntW);
    _b0272 = float(_TMP95);
    _TMP271 = min(_TMP2.y, _b0272);
    _b0276 = float(_TMP99);
    _TMP275 = min(_TMP4.y, _b0276);
    _b0280 = float(_TMP103);
    _TMP279 = min(_TMP6.y, _b0280);
    _b0284 = float(_TMP107);
    _TMP283 = min(_TMP8.y, _b0284);
    _b0288 = float(_TMP111);
    _TMP287 = min(_TMP10.y, _b0288);
    _b0292 = float(_TMP115);
    _TMP291 = min(_TMP12.y, _b0292);
    _b0296 = float(_TMP119);
    _TMP295 = min(_TMP14.y, _b0296);
    _b0300 = float(_TMP123);
    _TMP299 = min(_TMP16.y, _b0300);
    _TMP50 = max(_TMP295, _TMP299);
    _TMP51 = max(_TMP291, _TMP50);
    _TMP52 = max(_TMP287, _TMP51);
    _TMP53 = max(_TMP283, _TMP52);
    _TMP54 = max(_TMP279, _TMP53);
    _TMP55 = max(_TMP275, _TMP54);
    _TMP56 = max(_TMP271, _TMP55);
    _TMP303 = max(_TMP0.y, _TMP56);
    if (_TMP303 >= 0.00000000E+00) { 
        _TMP46 = _TMP1.xyz + _TMP303*(_fCB - _TMP1.xyz);
    } else {
        _TMP46 = _TMP1.xyz;
    } 
    FragColor.xyz = _TMP46;
    return;
} 
#endif
