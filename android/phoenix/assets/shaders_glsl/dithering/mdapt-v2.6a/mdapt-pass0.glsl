// GLSL shader autogenerated by cg2glsl.py.
#if defined(VERTEX)

#if __VERSION__ >= 130
#define COMPAT_VARYING out
#define COMPAT_ATTRIBUTE in
#define COMPAT_TEXTURE texture
#else
#define COMPAT_VARYING varying 
#define COMPAT_ATTRIBUTE attribute 
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARt1;
COMPAT_VARYING     vec2 _texCoord1;
COMPAT_VARYING     vec4 _position1;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec4 _position1;
    vec2 _texCoord1;
    vec2 VARt1;
};
out_vertex _ret_0;
input_dummy _IN1;
vec4 _r0006;
COMPAT_ATTRIBUTE vec4 VertexCoord;
COMPAT_ATTRIBUTE vec4 TexCoord;
COMPAT_VARYING vec4 TEX0;
 
uniform mat4 MVPMatrix;
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    out_vertex _OUT;
    vec2 _ps;
    _r0006 = VertexCoord.x*MVPMatrix[0];
    _r0006 = _r0006 + VertexCoord.y*MVPMatrix[1];
    _r0006 = _r0006 + VertexCoord.z*MVPMatrix[2];
    _r0006 = _r0006 + VertexCoord.w*MVPMatrix[3];
    _ps = vec2(1.00000000E+00/TextureSize.x, 1.00000000E+00/TextureSize.y);
    _OUT.VARt1 = vec2(_ps.x, _ps.y);
    _ret_0._position1 = _r0006;
    _ret_0._texCoord1 = TexCoord.xy;
    VARt1 = _OUT.VARt1;
    gl_Position = _r0006;
    TEX0.xy = TexCoord.xy;
    return;
    TEX0.xy = _ret_0._texCoord1;
} 
#elif defined(FRAGMENT)

#if __VERSION__ >= 130
#define COMPAT_VARYING in
#define COMPAT_TEXTURE texture
out vec4 FragColor;
#else
#define COMPAT_VARYING varying
#define FragColor gl_FragColor
#define COMPAT_TEXTURE texture2D
#endif

#ifdef GL_ES
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif
#define COMPAT_PRECISION mediump
#else
#define COMPAT_PRECISION
#endif
COMPAT_VARYING     vec2 VARt1;
COMPAT_VARYING     vec2 _texCoord;
struct input_dummy {
    vec2 _video_size;
    vec2 _texture_size;
    vec2 _output_dummy_size;
};
struct out_vertex {
    vec2 _texCoord;
    vec2 VARt1;
};
vec4 _ret_0;
float _TMP15;
float _TMP13;
float _TMP11;
float _TMP9;
float _TMP23;
float _TMP22;
float _TMP21;
float _TMP20;
float _TMP25;
float _TMP24;
float _TMP7;
float _TMP5;
float _TMP18;
float _TMP17;
vec4 _TMP4;
vec4 _TMP3;
vec4 _TMP2;
vec4 _TMP1;
vec4 _TMP0;
out_vertex _VAR1;
uniform sampler2D Texture;
vec2 _c0032;
vec2 _c0034;
vec2 _c0036;
vec2 _c0038;
vec3 _v0040;
vec3 _v0046;
vec3 _v0052;
vec3 _v0058;
float _TMP65;
float _TMP67;
vec3 _diff0068;
float _ravg0068;
float _a0070;
float _x0076;
float _TMP77;
float _TMP85;
float _TMP87;
vec3 _diff0088;
float _ravg0088;
float _a0090;
float _x0096;
float _TMP97;
float _TMP105;
float _TMP107;
vec3 _diff0108;
float _ravg0108;
float _a0110;
float _x0116;
float _TMP117;
float _TMP125;
float _TMP127;
vec3 _diff0128;
float _ravg0128;
float _a0130;
float _x0136;
float _TMP137;
float _TMP145;
float _TMP147;
vec3 _diff0148;
float _ravg0148;
float _a0150;
float _x0156;
float _TMP157;
float _TMP165;
float _TMP167;
vec3 _diff0168;
float _ravg0168;
float _a0170;
float _x0176;
float _TMP177;
float _TMP183;
float _e0184;
float _f0184;
float _d0184;
float _c0184;
COMPAT_VARYING vec4 TEX0;
 
uniform int FrameDirection;
uniform int FrameCount;
uniform COMPAT_PRECISION vec2 OutputSize;
uniform COMPAT_PRECISION vec2 TextureSize;
uniform COMPAT_PRECISION vec2 InputSize;
void main()
{
    vec3 _CsL;
    vec3 _CsR;
    vec3 _CsD;
    vec3 _CsU;
    float _r;
    float _g;
    _TMP0 = COMPAT_TEXTURE(Texture, TEX0.xy);
    _c0032 = TEX0.xy + vec2( -1.00000000E+00, 0.00000000E+00)*VARt1;
    _TMP1 = COMPAT_TEXTURE(Texture, _c0032);
    _c0034 = TEX0.xy + vec2( 1.00000000E+00, 0.00000000E+00)*VARt1;
    _TMP2 = COMPAT_TEXTURE(Texture, _c0034);
    _c0036 = TEX0.xy + vec2( 0.00000000E+00, -1.00000000E+00)*VARt1;
    _TMP3 = COMPAT_TEXTURE(Texture, _c0036);
    _c0038 = TEX0.xy + vec2( 0.00000000E+00, 1.00000000E+00)*VARt1;
    _TMP4 = COMPAT_TEXTURE(Texture, _c0038);
    _v0040 = _TMP0.xyz - _TMP1.xyz;
    _TMP17 = dot(_v0040, _v0040);
    _TMP18 = inversesqrt(_TMP17);
    _CsL = _TMP18*_v0040;
    _v0046 = _TMP0.xyz - _TMP2.xyz;
    _TMP17 = dot(_v0046, _v0046);
    _TMP18 = inversesqrt(_TMP17);
    _CsR = _TMP18*_v0046;
    _v0052 = _TMP0.xyz - _TMP4.xyz;
    _TMP17 = dot(_v0052, _v0052);
    _TMP18 = inversesqrt(_TMP17);
    _CsD = _TMP18*_v0052;
    _v0058 = _TMP0.xyz - _TMP3.xyz;
    _TMP17 = dot(_v0058, _v0058);
    _TMP18 = inversesqrt(_TMP17);
    _CsU = _TMP18*_v0058;
    _TMP5 = dot(_CsL, _CsR);
    _diff0068 = _TMP1.xyz - _TMP2.xyz;
    _ravg0068 = (_TMP1.x + _TMP2.x)*5.00000000E-01;
    _diff0068 = _diff0068*_diff0068*vec3(2.00000000E+00 + _ravg0068, 4.00000000E+00, 3.00000000E+00 - _ravg0068);
    _a0070 = _diff0068.x + _diff0068.y + _diff0068.z;
    _TMP24 = inversesqrt(_a0070);
    _TMP67 = 1.00000000E+00/_TMP24;
    _x0076 = (_TMP67 - 3.00000000E+00)/-3.00000000E+00;
    _TMP25 = min(1.00000000E+00, _x0076);
    _TMP77 = max(0.00000000E+00, _TMP25);
    _TMP65 = _TMP77*_TMP77*(3.00000000E+00 - 2.00000000E+00*_TMP77);
    _r = _TMP5*_TMP65;
    _TMP7 = dot(_CsU, _CsD);
    _diff0088 = _TMP3.xyz - _TMP4.xyz;
    _ravg0088 = (_TMP3.x + _TMP4.x)*5.00000000E-01;
    _diff0088 = _diff0088*_diff0088*vec3(2.00000000E+00 + _ravg0088, 4.00000000E+00, 3.00000000E+00 - _ravg0088);
    _a0090 = _diff0088.x + _diff0088.y + _diff0088.z;
    _TMP24 = inversesqrt(_a0090);
    _TMP87 = 1.00000000E+00/_TMP24;
    _x0096 = (_TMP87 - 3.00000000E+00)/-3.00000000E+00;
    _TMP25 = min(1.00000000E+00, _x0096);
    _TMP97 = max(0.00000000E+00, _TMP25);
    _TMP85 = _TMP97*_TMP97*(3.00000000E+00 - 2.00000000E+00*_TMP97);
    _g = _TMP7*_TMP85;
    _TMP9 = dot(_CsL, _CsU);
    _diff0108 = _TMP1.xyz - _TMP3.xyz;
    _ravg0108 = (_TMP1.x + _TMP3.x)*5.00000000E-01;
    _diff0108 = _diff0108*_diff0108*vec3(2.00000000E+00 + _ravg0108, 4.00000000E+00, 3.00000000E+00 - _ravg0108);
    _a0110 = _diff0108.x + _diff0108.y + _diff0108.z;
    _TMP24 = inversesqrt(_a0110);
    _TMP107 = 1.00000000E+00/_TMP24;
    _x0116 = (_TMP107 - 3.00000000E+00)/-3.00000000E+00;
    _TMP25 = min(1.00000000E+00, _x0116);
    _TMP117 = max(0.00000000E+00, _TMP25);
    _TMP105 = _TMP117*_TMP117*(3.00000000E+00 - 2.00000000E+00*_TMP117);
    _TMP11 = dot(_CsL, _CsD);
    _diff0128 = _TMP1.xyz - _TMP4.xyz;
    _ravg0128 = (_TMP1.x + _TMP4.x)*5.00000000E-01;
    _diff0128 = _diff0128*_diff0128*vec3(2.00000000E+00 + _ravg0128, 4.00000000E+00, 3.00000000E+00 - _ravg0128);
    _a0130 = _diff0128.x + _diff0128.y + _diff0128.z;
    _TMP24 = inversesqrt(_a0130);
    _TMP127 = 1.00000000E+00/_TMP24;
    _x0136 = (_TMP127 - 3.00000000E+00)/-3.00000000E+00;
    _TMP25 = min(1.00000000E+00, _x0136);
    _TMP137 = max(0.00000000E+00, _TMP25);
    _TMP125 = _TMP137*_TMP137*(3.00000000E+00 - 2.00000000E+00*_TMP137);
    _TMP13 = dot(_CsR, _CsU);
    _diff0148 = _TMP2.xyz - _TMP3.xyz;
    _ravg0148 = (_TMP2.x + _TMP3.x)*5.00000000E-01;
    _diff0148 = _diff0148*_diff0148*vec3(2.00000000E+00 + _ravg0148, 4.00000000E+00, 3.00000000E+00 - _ravg0148);
    _a0150 = _diff0148.x + _diff0148.y + _diff0148.z;
    _TMP24 = inversesqrt(_a0150);
    _TMP147 = 1.00000000E+00/_TMP24;
    _x0156 = (_TMP147 - 3.00000000E+00)/-3.00000000E+00;
    _TMP25 = min(1.00000000E+00, _x0156);
    _TMP157 = max(0.00000000E+00, _TMP25);
    _TMP145 = _TMP157*_TMP157*(3.00000000E+00 - 2.00000000E+00*_TMP157);
    _TMP15 = dot(_CsR, _CsD);
    _diff0168 = _TMP2.xyz - _TMP4.xyz;
    _ravg0168 = (_TMP2.x + _TMP4.x)*5.00000000E-01;
    _diff0168 = _diff0168*_diff0168*vec3(2.00000000E+00 + _ravg0168, 4.00000000E+00, 3.00000000E+00 - _ravg0168);
    _a0170 = _diff0168.x + _diff0168.y + _diff0168.z;
    _TMP24 = inversesqrt(_a0170);
    _TMP167 = 1.00000000E+00/_TMP24;
    _x0176 = (_TMP167 - 3.00000000E+00)/-3.00000000E+00;
    _TMP25 = min(1.00000000E+00, _x0176);
    _TMP177 = max(0.00000000E+00, _TMP25);
    _TMP165 = _TMP177*_TMP177*(3.00000000E+00 - 2.00000000E+00*_TMP177);
    _c0184 = _TMP9*_TMP105;
    _d0184 = _TMP11*_TMP125;
    _e0184 = _TMP13*_TMP145;
    _f0184 = _TMP15*_TMP165;
    _TMP20 = min(_e0184, _f0184);
    _TMP21 = min(_d0184, _TMP20);
    _TMP22 = min(_c0184, _TMP21);
    _TMP23 = min(_g, _TMP22);
    _TMP183 = min(_r, _TMP23);
    _ret_0 = vec4(_r, _g, _TMP183, 0.00000000E+00);
    FragColor = _ret_0;
    return;
} 
#endif
